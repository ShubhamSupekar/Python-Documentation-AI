[
    {
        "function": "abs()",
        "link": "ref_func_abs.asp",
        "description": "Returns the absolute value of a number",
        "query": "Return the absolute value of a number:",
        "eg": "\n    x = abs(-7.25)\n  ",
        "Parameter": "n",
        "eg_Description": "Required. A number"
    },
    {
        "function": "all()",
        "link": "ref_func_all.asp",
        "description": "Returns True if all items in an iterable object are true",
        "query": "Check if all items in a list are True:",
        "eg": "\n    mylist = [True, True, True]\n    x = all(mylist)\n   ",
        "Parameter": "iterable",
        "eg_Description": "An iterable object (list, tuple, dictionary)"
    },
    {
        "function": "any()",
        "link": "ref_func_any.asp",
        "description": "Returns True if any item in an iterable object is true",
        "query": "Check if any of the items in a list are True:",
        "eg": "\n    mylist = [False, True, False]\n    x = any(mylist)\n   ",
        "Parameter": "iterable",
        "eg_Description": "An iterable object (list, tuple, dictionary)"
    },
    {
        "function": "ascii()",
        "link": "ref_func_ascii.asp",
        "description": "Returns a readable version of an object. Replaces none-ascii characters with escape character",
        "query": "Escape non-ascii characters:",
        "eg": "\n    x = ascii(\"My name is St\u00c3\u00a5le\")\n   ",
        "Parameter": "object",
        "eg_Description": "An object, like String, List, Tuple, Dictionary etc."
    },
    {
        "function": "bin()",
        "link": "ref_func_bin.asp",
        "description": "Returns the binary version of a number",
        "query": "Return the binary version of 36:",
        "eg": "\n    x = bin(36)\n  ",
        "Parameter": "n",
        "eg_Description": "Required. An integer"
    },
    {
        "function": "bool()",
        "link": "ref_func_bool.asp",
        "description": "Returns the boolean value of the specified object",
        "query": "Return the boolean value of 1:",
        "eg": "\n    x = bool(1)\n  ",
        "Parameter": "object",
        "eg_Description": "Any object, like String, List, Number etc."
    },
    {
        "function": "bytearray()",
        "link": "ref_func_bytearray.asp",
        "description": "Returns an array of bytes",
        "query": "Return an array of 4 bytes:",
        "eg": "\n    x = bytearray(4)\n  ",
        "Parameter": "x",
        "eg_Description": "A source to use when creating the bytearray object.If it is an   integer, an empty bytearray object of the specified size will be created. If it is a String, make sure you specify the encoding of the source."
    },
    {
        "function": "bytes()",
        "link": "ref_func_bytes.asp",
        "description": "Returns a bytes object",
        "query": "Return an array of 4 bytes:",
        "eg": "\n    x = bytes(4)\n  ",
        "Parameter": "x",
        "eg_Description": "A source to use when creating the bytes object.If it is an   integer, an empty bytes object of the specified size will be created. If it is a String, make sure you specify the encoding of the source."
    },
    {
        "function": "callable()",
        "link": "ref_func_callable.asp",
        "description": "Returns True if the specified object is callable, otherwise False",
        "query": "Check if a function is callable:",
        "eg": "\n    def x():\u00a0 a = 5print(callable(x))",
        "Parameter": "object",
        "eg_Description": "The object you want to test if it is callable or not."
    },
    {
        "function": "chr()",
        "link": "ref_func_chr.asp",
        "description": "Returns a character from the specified  Unicode code.",
        "query": "Get the character that represents the unicode 97:",
        "eg": "\n    x = chr(97)",
        "Parameter": "number",
        "eg_Description": "An integer representing a valid Unicode code point"
    },
    {
        "function": "classmethod()",
        "link": "No link",
        "description": "Converts a method into a class method",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "compile()",
        "link": "ref_func_compile.asp",
        "description": "Returns the specified source as an object, ready to be executed",
        "query": "Compile text as code, and the execute it:",
        "eg": "\n    x = compile('print(55)', 'test', 'eval')exec(x)",
        "Parameter": "source",
        "eg_Description": "Required. The source to compile, can be a String, a Bytes object, or an   AST object"
    },
    {
        "function": "complex()",
        "link": "ref_func_complex.asp",
        "description": "Returns a complex number",
        "query": "Convert the number 3 and imaginary number 5 into a complex number:",
        "eg": "\n    x = complex(3, 5)",
        "Parameter": "real",
        "eg_Description": "Required. A number representing the real part of the complex number.   Default 0. The real number can also be a String, like this '3+5j', when this   is the case, the second parameter should be omitted."
    },
    {
        "function": "delattr()",
        "link": "ref_func_delattr.asp",
        "description": "Deletes the specified attribute (property or method) from the specified object",
        "query": "Delete the \"age\" property from the \"person\" object:",
        "eg": "\n    class Person:\u00a0 name = \"John\"\u00a0 age = 36\u00a0 country = \"Norway\"\n    delattr(Person, 'age')",
        "Parameter": "object",
        "eg_Description": "Required. An object."
    },
    {
        "function": "dict()",
        "link": "ref_func_dict.asp",
        "description": "Returns a dictionary (Array)",
        "query": "Create a dictionary containing personal information:",
        "eg": "\n    x = dict(name = \"John\", age = 36, country = \"Norway\")",
        "Parameter": "keyword arguments",
        "eg_Description": "Optional. As many keyword arguments you like, separated by comma: key   = value, key = value ..."
    },
    {
        "function": "dir()",
        "link": "ref_func_dir.asp",
        "description": "Returns a list of the specified object's properties and methods",
        "query": "Display the content of an object:",
        "eg": "\n    class Person:\u00a0 name = \"John\"\u00a0 age = 36\u00a0 country = \"Norway\"\n    print(dir(Person))",
        "Parameter": "object",
        "eg_Description": "The object you want to see the valid attributes of"
    },
    {
        "function": "divmod()",
        "link": "ref_func_divmod.asp",
        "description": "Returns the quotient and the remainder when argument1 is divided by argument2",
        "query": "Display the quotient and the remainder of 5 divided by 2:",
        "eg": "\n    x = divmod(5, 2)",
        "Parameter": "dividend",
        "eg_Description": "A Number. The number you want to divide"
    },
    {
        "function": "enumerate()",
        "link": "ref_func_enumerate.asp",
        "description": "Takes a collection (e.g. a tuple) and returns it as an enumerate object",
        "query": "Convert a tuple into an enumerate object:",
        "eg": "\n    x = ('apple', 'banana', 'cherry')\n    y = enumerate(x)",
        "Parameter": "iterable",
        "eg_Description": "An iterable object"
    },
    {
        "function": "eval()",
        "link": "ref_func_eval.asp",
        "description": "Evaluates and executes an expression",
        "query": "Evaluate the expression 'print(55)':",
        "eg": "\n    x = 'print(55)'eval(x)",
        "Parameter": "expression",
        "eg_Description": "A String, that will be evaluated as Python code"
    },
    {
        "function": "exec()",
        "link": "ref_func_exec.asp",
        "description": "Executes the specified code (or object)",
        "query": "Execute a block of code:",
        "eg": "\n    x = 'name \n    = \"John\"\\nprint(name)'exec(x)",
        "Parameter": "object",
        "eg_Description": "A String, or a code object"
    },
    {
        "function": "filter()",
        "link": "ref_func_filter.asp",
        "description": "Use a filter function to exclude items in an iterable object",
        "query": "Filter the array, and return a new array with only the values equal to or  above 18:",
        "eg": "\n    ages = [5, 12, 17, 18, 24, 32]def myFunc(x):\u00a0 if x < 18:\u00a0\u00a0\u00a0 \n    return False\u00a0 else:\u00a0\u00a0\u00a0 return Trueadults \n    = filter(myFunc, ages)\n    for x in adults:\u00a0 print(x)",
        "Parameter": "function",
        "eg_Description": "A Function to be run for each item in the iterable"
    },
    {
        "function": "float()",
        "link": "ref_func_float.asp",
        "description": "Returns a floating point number",
        "query": "Convert the number 3 into a floating point number:",
        "eg": "\n    x = \n    float(3)",
        "Parameter": "value",
        "eg_Description": "A number or a string that can be converted into a floating point number"
    },
    {
        "function": "format()",
        "link": "ref_func_format.asp",
        "description": "Formats a specified value",
        "query": "Format the number 0.5 into a percentage value:",
        "eg": "\n    x = \n    format(0.5, '%')",
        "Parameter": "value",
        "eg_Description": "A value of any format"
    },
    {
        "function": "frozenset()",
        "link": "ref_func_frozenset.asp",
        "description": "Returns a frozenset object",
        "query": "Freeze the list, and make it unchangeable:",
        "eg": "\n    mylist = ['apple', 'banana', 'cherry']x = frozenset(mylist)",
        "Parameter": "iterable",
        "eg_Description": "An iterable object, like list, set, tuple etc."
    },
    {
        "function": "getattr()",
        "link": "ref_func_getattr.asp",
        "description": "Returns the value of the specified attribute (property or method)",
        "query": "Get the value of the \"age\" property of the \"Person\" object:",
        "eg": "\n    class Person:\u00a0 name = \"John\"\u00a0 age = 36\u00a0 country = \"Norway\"\n    x =\n    getattr(Person, 'age')",
        "Parameter": "object",
        "eg_Description": "Required. An object."
    },
    {
        "function": "globals()",
        "link": "ref_func_globals.asp",
        "description": "Returns the current global symbol table as a dictionary",
        "query": "Display the global symbol table:",
        "eg": "\n    x = globals()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "hasattr()",
        "link": "ref_func_hasattr.asp",
        "description": "Returns True if the specified object has the specified attribute (property/method)",
        "query": "Check if the \"Person\" object has the \"age\" property:",
        "eg": "\n    class Person:\u00a0 name = \"John\"\u00a0 age = 36\u00a0 country = \"Norway\"\n    x = hasattr(Person, 'age')",
        "Parameter": "object",
        "eg_Description": "Required. An object."
    },
    {
        "function": "hash()",
        "link": "No link",
        "description": "Returns the hash value of a specified object",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "help()",
        "link": "No link",
        "description": "Executes the built-in help system",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "hex()",
        "link": "ref_func_hex.asp",
        "description": "Converts a number into a hexadecimal value",
        "query": "Convert 255 into hexadecimal value:",
        "eg": "\n    x = \n    hex(255)",
        "Parameter": "number",
        "eg_Description": "An Integer"
    },
    {
        "function": "id()",
        "link": "ref_func_id.asp",
        "description": "Returns the id of an object",
        "query": "Return the unique id of a tuple object:",
        "eg": "\n    x = \n    ('apple', 'banana', 'cherry')y = id(x)",
        "Parameter": "object",
        "eg_Description": "Any object, String, Number, List, Class etc."
    },
    {
        "function": "input()",
        "link": "ref_func_input.asp",
        "description": "Allowing user input",
        "query": "Ask for the user's name and print it:",
        "eg": "\n    print('Enter your name:')x = input()print('Hello, ' + x)",
        "Parameter": "prompt",
        "eg_Description": "A String, representing a default message before the input."
    },
    {
        "function": "int()",
        "link": "ref_func_int.asp",
        "description": "Returns an integer number",
        "query": "Convert the number 3.5 into an integer:",
        "eg": "\n    x = \n    int(3.5)",
        "Parameter": "value",
        "eg_Description": "A number or a string that can be converted into an integer number"
    },
    {
        "function": "isinstance()",
        "link": "ref_func_isinstance.asp",
        "description": "Returns True if a specified object is an instance of a specified object",
        "query": "Check if the number 5 is an integer:",
        "eg": "\n    x = isinstance(5, int)",
        "Parameter": "object",
        "eg_Description": "Required. An object."
    },
    {
        "function": "issubclass()",
        "link": "ref_func_issubclass.asp",
        "description": "Returns True if a specified class is a subclass of a specified object",
        "query": "Check if the class myObj is a subclass of  myAge:",
        "eg": "\n    class myAge:\u00a0 age = 36class myObj(myAge):\u00a0 name = \n    \"John\"\u00a0 age = myAgex = issubclass(myObj, myAge)",
        "Parameter": "object",
        "eg_Description": "Required. An object."
    },
    {
        "function": "iter()",
        "link": "ref_func_iter.asp",
        "description": "Returns an iterator object",
        "query": "Create an iterator object, and print the items:",
        "eg": "\n    x = iter([\"apple\", \"banana\", \"cherry\"])print(next(x))print(next(x))\n    print(next(x))",
        "Parameter": "object",
        "eg_Description": "Required. An iterable object"
    },
    {
        "function": "len()",
        "link": "ref_func_len.asp",
        "description": "Returns the length of an object",
        "query": "Return the number of items in a list:",
        "eg": "\n    mylist = [\"apple\", \"banana\", \"cherry\"]x = len(mylist)",
        "Parameter": "object",
        "eg_Description": "Required. An object. Must be a sequence or a collection"
    },
    {
        "function": "list()",
        "link": "ref_func_list.asp",
        "description": "Returns a list",
        "query": "Create a list containing fruit names:",
        "eg": "\n    x = \n    list(('apple', 'banana', 'cherry'))",
        "Parameter": "iterable",
        "eg_Description": "Optional. A sequence, collection or an iterator object"
    },
    {
        "function": "locals()",
        "link": "ref_func_locals.asp",
        "description": "Returns an updated dictionary of the current local symbol table",
        "query": "Display the local symbol table:",
        "eg": "\n    x = locals()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "map()",
        "link": "ref_func_map.asp",
        "description": "Returns the specified iterator with the specified function applied to each item",
        "query": "Calculate the length of each word in the tuple:",
        "eg": "\n    def myfunc(n):\u00a0 return len(n)x = map(myfunc, ('apple', \n    'banana', 'cherry'))",
        "Parameter": "function",
        "eg_Description": "Required. The function to execute for each item"
    },
    {
        "function": "max()",
        "link": "ref_func_max.asp",
        "description": "Returns the largest item in an iterable",
        "query": "Return the largest number:",
        "eg": "\n    x = max(5, 10)",
        "Parameter": "n1, n2, n3, ...",
        "eg_Description": "One or more items to compare"
    },
    {
        "function": "memoryview()",
        "link": "ref_func_memoryview.asp",
        "description": "Returns a memory view object",
        "query": "Create and print a memoryview object:",
        "eg": "\n    x = memoryview(b\"Hello\")print(x)#return the Unicode of the \n    first characterprint(x[0])#return the Unicode of the second \n    characterprint(x[1])",
        "Parameter": "obj",
        "eg_Description": "A Bytes object or a Bytearray object."
    },
    {
        "function": "min()",
        "link": "ref_func_min.asp",
        "description": "Returns the smallest item in an iterable",
        "query": "Return the lowest number:",
        "eg": "\n    x = min(5, 10)",
        "Parameter": "n1, n2, n3, ...",
        "eg_Description": "One or more items to compare"
    },
    {
        "function": "next()",
        "link": "ref_func_next.asp",
        "description": "Returns the next item in an iterable",
        "query": "Create an iterator, and print the items one by one:",
        "eg": "\n    mylist = iter([\"apple\", \"banana\", \"cherry\"])x = \n    next(mylist)print(x)x = next(mylist)print(x)x = next(mylist)\n    print(x)",
        "Parameter": "iterator",
        "eg_Description": "Required. An iterator object (e.g. a list)."
    },
    {
        "function": "object()",
        "link": "ref_func_object.asp",
        "description": "Returns a new object",
        "query": "Create an empty object:",
        "eg": "\n    x = \n    object()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "oct()",
        "link": "ref_func_oct.asp",
        "description": "Converts a number into an octal",
        "query": "Convert the number 12 into an octal value:",
        "eg": "\n    x = \n    oct(12)",
        "Parameter": "int",
        "eg_Description": "An Integer Number"
    },
    {
        "function": "open()",
        "link": "ref_func_open.asp",
        "description": "Opens a file and returns a file object",
        "query": "Open a file and print the content:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.read())",
        "Parameter": "file",
        "eg_Description": "The path and name of the file"
    },
    {
        "function": "ord()",
        "link": "ref_func_ord.asp",
        "description": "Convert an integer  representing the Unicode of the specified character",
        "query": "Return the integer that represents the character \"h\":",
        "eg": "\n    x = ord(\"h\")",
        "Parameter": "character",
        "eg_Description": "String, any character"
    },
    {
        "function": "pow()",
        "link": "ref_func_pow.asp",
        "description": "Returns the value of x to the power of y",
        "query": "Return the value of 4 to the power of 3 (same as 4 * 4 * 4):",
        "eg": "\n    x = pow(4, 3)",
        "Parameter": "x",
        "eg_Description": "A number, the base"
    },
    {
        "function": "print()",
        "link": "ref_func_print.asp",
        "description": "Prints to the standard output device",
        "query": "Print a message onto the screen:",
        "eg": "\n    \u00a0print(\"Hello World\")",
        "Parameter": "object(s)",
        "eg_Description": "Any object, and as many as you like. Will be converted to string before   printed"
    },
    {
        "function": "property()",
        "link": "No link",
        "description": "Gets, sets, deletes a property",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "range()",
        "link": "ref_func_range.asp",
        "description": "Returns a sequence of numbers, starting from 0 and increments by 1 (by default)",
        "query": "Create a sequence of numbers from 0 to 5, and print each item in the  sequence:",
        "eg": "\n    x = range(6)for n in x:\u00a0 print(n)",
        "Parameter": "start",
        "eg_Description": "Optional. An integer number specifying at which position to start.   Default is 0"
    },
    {
        "function": "repr()",
        "link": "No link",
        "description": "Returns a readable version of an object",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "reversed()",
        "link": "ref_func_reversed.asp",
        "description": "Returns a reversed iterator",
        "query": "Reverse the sequence of a list, and print each item:",
        "eg": "\n    alph = [\"a\", \"b\", \"c\", \"d\"]ralph = reversed(alph)for x in ralph:\u00a0 \n    print(x)",
        "Parameter": "sequence",
        "eg_Description": "Required. Any iterable object"
    },
    {
        "function": "round()",
        "link": "ref_func_round.asp",
        "description": "Rounds a numbers",
        "query": "Round a number to only two decimals:",
        "eg": "\n    x = round(5.76543, 2)print(x)",
        "Parameter": "number",
        "eg_Description": "Required. The number to be rounded"
    },
    {
        "function": "set()",
        "link": "ref_func_set.asp",
        "description": "Returns a new set object",
        "query": "Create a set containing fruit names:",
        "eg": "\n    x = \n    set(('apple', 'banana', 'cherry'))",
        "Parameter": "iterable",
        "eg_Description": "Optional. A sequence, collection or an iterator object"
    },
    {
        "function": "setattr()",
        "link": "ref_func_setattr.asp",
        "description": "Sets an attribute (property/method) of an object",
        "query": "Change the value of the \"age\" property of the \"person\" object:",
        "eg": "\n    class Person:\u00a0 name = \"John\"\u00a0 age = 36\u00a0 country = \"Norway\"\n    setattr(Person, 'age', 40)",
        "Parameter": "object",
        "eg_Description": "Required. An object."
    },
    {
        "function": "slice()",
        "link": "ref_func_slice.asp",
        "description": "Returns a slice object",
        "query": "Create a tuple and a slice object. Use the slice object to get only the two  first items of the tuple:",
        "eg": "\n    a = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")x = slice(2)print(a[x])",
        "Parameter": "start",
        "eg_Description": "Optional. An integer number specifying at which position to start the   slicing. Default is 0"
    },
    {
        "function": "sorted()",
        "link": "ref_func_sorted.asp",
        "description": "Returns a sorted list",
        "query": "Sort a tuple:",
        "eg": "\n    a = (\"b\", \"g\", \"a\", \"d\", \"f\", \"c\", \"h\", \"e\")x = sorted(a)print(x)",
        "Parameter": "iterable",
        "eg_Description": "Required. The sequence to sort, list, dictionary, tuple etc."
    },
    {
        "function": "staticmethod()",
        "link": "No link",
        "description": "Converts a method into a static method",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "str()",
        "link": "ref_func_str.asp",
        "description": "Returns a string object",
        "query": "Convert the number 3.5 into an string:",
        "eg": "\n    x = \n    str(3.5)",
        "Parameter": "object",
        "eg_Description": "Any object. Specifies the object to convert into a string"
    },
    {
        "function": "sum()",
        "link": "ref_func_sum.asp",
        "description": "Sums the items of an iterator",
        "query": "Add all items in a tuple, and return the result:",
        "eg": "\n    a = (1, 2, 3, 4, 5)x = sum(a)",
        "Parameter": "iterable",
        "eg_Description": "Required. The sequence to sum"
    },
    {
        "function": "super()",
        "link": "ref_func_super.asp",
        "description": "Returns an object that represents the parent class",
        "query": "Create a class that will inherit all the methods and properties from  another class:",
        "eg": "\n    class Parent:\u00a0 def __init__(self, txt):\u00a0\u00a0\u00a0 \n    self.message = txt\u00a0 def printmessage(self):\u00a0\u00a0\u00a0 \n    print(self.message)class Child(Parent):\u00a0 def __init__(self, \n    txt):\u00a0\u00a0\u00a0 super().__init__(txt)x = Child(\"Hello, \n    and welcome!\")x.printmessage()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "tuple()",
        "link": "ref_func_tuple.asp",
        "description": "Returns a tuple",
        "query": "Create a tuple containing fruit names:",
        "eg": "\n    x = \n    tuple(('apple', 'banana', 'cherry'))",
        "Parameter": "iterable",
        "eg_Description": "Optional. A sequence, collection or an iterator object"
    },
    {
        "function": "type()",
        "link": "ref_func_type.asp",
        "description": "Returns the type of an object",
        "query": "Return the type of these objects:",
        "eg": "\n    a = ('apple', 'banana', 'cherry')b = \"Hello World\"c = 33x = \n    type(a)y = type(b)z = type(c)",
        "Parameter": "object",
        "eg_Description": "Required. If only one parameter is specified, the type() function   returns the type of this object"
    },
    {
        "function": "vars()",
        "link": "ref_func_vars.asp",
        "description": "Returns the __dict__ property of an object",
        "query": "Return the __dict__ atribute of an object called Person:",
        "eg": "\n    class Person:\u00a0 name = \"John\"\u00a0 age = 36\u00a0 country = \n    \"norway\"x = vars(Person) ",
        "Parameter": "object",
        "eg_Description": "Any object with a __dict__attribute"
    },
    {
        "function": "zip()",
        "link": "ref_func_zip.asp",
        "description": "Returns an iterator, from two or more iterators",
        "query": "Join two tuples together:",
        "eg": "\n    a = (\"John\", \"Charles\", \"Mike\")b = (\"Jenny\", \"Christy\", \"Monica\")\nx = zip(a, b) ",
        "Parameter": "iterable1, iterable2, iterable3 ...",
        "eg_Description": "Iterable objects that will be joined together"
    },
    {
        "function": "capitalize()",
        "link": "ref_string_capitalize.asp",
        "description": "Converts the first   character to upper case",
        "query": "Upper case the first letter in this sentence:",
        "eg": "\n    txt = \"hello, and welcome to my world.\"x = txt.capitalize()\n    print (x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "casefold()",
        "link": "ref_string_casefold.asp",
        "description": "Converts string into   lower case",
        "query": "Make the string lower case:",
        "eg": "\n    txt = \"Hello, And Welcome To My World!\"x = txt.casefold()\n    print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "center()",
        "link": "ref_string_center.asp",
        "description": "Returns a centered   string",
        "query": "Print the word \"banana\", taking up the space of 20 characters, with  \"banana\" in the middle:",
        "eg": "\n    txt = \"banana\"x = txt.center(20)print(x)",
        "Parameter": "length",
        "eg_Description": "Required. The length of the returned string"
    },
    {
        "function": "count()",
        "link": "ref_string_count.asp",
        "description": "Returns the number of   times a specified value occurs in a string",
        "query": "Return the number of times the value \"apple\" appears in the string:",
        "eg": "\n    txt = \"I love apples, apple are my favorite fruit\"x = txt.count(\"apple\")\nprint(x)",
        "Parameter": "value",
        "eg_Description": "Required. A String. The string to value to search for"
    },
    {
        "function": "encode()",
        "link": "ref_string_encode.asp",
        "description": "Returns an encoded   version of the string",
        "query": "UTF-8 encode the string:",
        "eg": "\n    txt = \"My name is St\u00c3\u00a5le\"x = txt.encode()print(x)",
        "Parameter": "encoding",
        "eg_Description": "Optional. A String specifying the encoding to use. Default is UTF-8"
    },
    {
        "function": "endswith()",
        "link": "ref_string_endswith.asp",
        "description": "Returns true if the   string ends with the specified value",
        "query": "Check if the string ends with a punctuation sign (.):",
        "eg": "\n    txt = \"Hello, welcome to my world.\"x = txt.endswith(\".\")print(x)",
        "Parameter": "value",
        "eg_Description": "Required. The value to check if the string ends with. This value parameter can also be a tuple, then the method returns true if the string ends with any of the tuple values."
    },
    {
        "function": "expandtabs()",
        "link": "ref_string_expandtabs.asp",
        "description": "Sets the   tab size of the string",
        "query": "Set the tab size to 2 whitespaces:",
        "eg": "\n    txt = \"H\\te\\tl\\tl\\to\"x =\u00a0 txt.expandtabs(2)print(x)\n",
        "Parameter": "tabsize",
        "eg_Description": "Optional. A number specifying the tabsize. Default tabsize is 8"
    },
    {
        "function": "find()",
        "link": "ref_string_find.asp",
        "description": "Searches the string for a   specified value and returns the position of where it was found",
        "query": "Where in the text is the word \"welcome\"?:",
        "eg": "\n    txt = \"Hello, welcome to my world.\"x = txt.find(\"welcome\")print(x)",
        "Parameter": "value",
        "eg_Description": "Required. The value to search for"
    },
    {
        "function": "format()",
        "link": "ref_string_format.asp",
        "description": "Formats specified   values in a string",
        "query": "Insert the price inside the placeholder, the price should be  in fixed point, two-decimal format:",
        "eg": "\n    txt = \"For only {price:.2f} dollars!\"print(txt.format(price = 49))",
        "Parameter": "value1, value2...",
        "eg_Description": "Required. One or more values that should be formatted and inserted in   the string.The values are either a list of values separated by commas, a   key=value list, or a combination of both.The values can be of any data type."
    },
    {
        "function": "format_map()",
        "link": "No link",
        "description": "Formats specified   values in a string",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "index()",
        "link": "ref_string_index.asp",
        "description": "Searches the string   for a specified value and returns the position of where it was found",
        "query": "Where in the text is the word \"welcome\"?:",
        "eg": "\n    txt = \"Hello, welcome to my world.\"x = txt.index(\"welcome\")print(x)",
        "Parameter": "value",
        "eg_Description": "Required. The value to search for"
    },
    {
        "function": "isalnum()",
        "link": "ref_string_isalnum.asp",
        "description": "Returns True if all   characters in the string are alphanumeric",
        "query": "Check if all the characters in the text are alphanumeric:",
        "eg": "\n    txt = \"Company12\"x = txt.isalnum()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isalpha()",
        "link": "ref_string_isalpha.asp",
        "description": "Returns True if all   characters in the string are in the alphabet",
        "query": "Check if all the characters in the text are letters:",
        "eg": "\n    txt = \"CompanyX\"x = txt.isalpha()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isascii()",
        "link": "ref_string_isascii.asp",
        "description": "Returns True if all   characters in the string are ascii characters",
        "query": "Check if all the characters in the text are ascii characters:",
        "eg": "\n    txt = \"Company123\"x = txt.isascii()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isdecimal()",
        "link": "ref_string_isdecimal.asp",
        "description": "Returns True if all   characters in the string are decimals",
        "query": "Check if all the characters in a string are decimals (0-9):",
        "eg": "\n    txt = \"1234\"x = txt.isdecimal()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isdigit()",
        "link": "ref_string_isdigit.asp",
        "description": "Returns True if all   characters in the string are digits",
        "query": "Check if all the characters in the text are digits:",
        "eg": "\n    txt = \"50800\"x = txt.isdigit()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isidentifier()",
        "link": "ref_string_isidentifier.asp",
        "description": "Returns True if   the string is an identifier",
        "query": "Check if the string is a valid identifier:",
        "eg": "\n    txt = \"Demo\"x = txt.isidentifier()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "islower()",
        "link": "ref_string_islower.asp",
        "description": "Returns True if all   characters in the string are lower case",
        "query": "Check if all the characters in the text are in lower case:",
        "eg": "\n    txt = \"hello \n    world!\"x = txt.islower()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isnumeric()",
        "link": "ref_string_isnumeric.asp",
        "description": "Returns True if   all characters in the string are numeric",
        "query": "Check if all the characters in the text are numeric:",
        "eg": "\n    txt = \n    \"565543\"x = txt.isnumeric()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isprintable()",
        "link": "ref_string_isprintable.asp",
        "description": "Returns True if   all characters in the string are printable",
        "query": "Check if all the characters in the text are printable:",
        "eg": "\n    txt = \n    \"Hello! Are you #1?\"x = txt.isprintable()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isspace()",
        "link": "ref_string_isspace.asp",
        "description": "Returns True if all   characters in the string are whitespaces",
        "query": "Check if all the characters in the text are whitespaces:",
        "eg": "\n    txt = \n    \"\u00a0\u00a0 \"x = txt.isspace()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "istitle()",
        "link": "ref_string_istitle.asp",
        "description": "Returns True if the string follows the rules of a   title",
        "query": "Check if each word start with an upper case letter:",
        "eg": "\n    txt = \"Hello, And Welcome To My World!\"x = txt.istitle()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isupper()",
        "link": "ref_string_isupper.asp",
        "description": "Returns True if all   characters in the string are upper case",
        "query": "Check if all the characters in the text are in upper case:",
        "eg": "\n    txt = \"THIS \n    IS NOW!\"x = txt.isupper()\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "join()",
        "link": "ref_string_join.asp",
        "description": "Converts the elements of   an iterable into a string",
        "query": "Join all items in a tuple into a string, using a hash character as separator:",
        "eg": "\n    myTuple = (\"John\", \"Peter\", \"Vicky\")x = \"#\".join(myTuple)\nprint(x)",
        "Parameter": "iterable",
        "eg_Description": "Required. Any iterable object where all the returned values are strings"
    },
    {
        "function": "ljust()",
        "link": "ref_string_ljust.asp",
        "description": "Returns a left justified   version of the string",
        "query": "Return a 20 characters long, left justified version of the word \"banana\":",
        "eg": "\n    txt = \"banana\"x = txt.ljust(20)print(x, \"is my \n    favorite fruit.\")",
        "Parameter": "length",
        "eg_Description": "Required. The length of the returned string"
    },
    {
        "function": "lower()",
        "link": "ref_string_lower.asp",
        "description": "Converts a string into   lower case",
        "query": "Lower case the string:",
        "eg": "\n    txt = \"Hello my FRIENDS\"x = txt.lower()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "lstrip()",
        "link": "ref_string_lstrip.asp",
        "description": "Returns a left trim   version of the string",
        "query": "Remove spaces to the left of the string:",
        "eg": "\n    txt = \"\u00a0\u00a0\u00a0\u00a0 banana\u00a0\u00a0\u00a0\u00a0 \"x = \n    txt.lstrip()\n    print(\"of all fruits\", x, \"is my favorite\")",
        "Parameter": "characters",
        "eg_Description": "Optional. A set of characters to remove as leading characters"
    },
    {
        "function": "maketrans()",
        "link": "ref_string_maketrans.asp",
        "description": "Returns a   translation table to be used in translations",
        "query": "Create a mapping table, and use it in the translate() method to replace any \"S\" characters with a \"P\" character:",
        "eg": "\n    txt = \"Hello Sam!\"mytable = str.maketrans(\"S\", \"P\")print(txt.translate(mytable))",
        "Parameter": "x",
        "eg_Description": "Required. If only one parameter is specified, this has to be a dictionary describing how to   perform the replace. If two or more parameters are specified, this parameter   has to be a string specifying the characters you want to replace."
    },
    {
        "function": "partition()",
        "link": "ref_string_partition.asp",
        "description": "Returns a tuple   where the string is parted into three parts",
        "query": "Search for the word \"bananas\", and return a tuple with three elements:",
        "eg": "\n    txt = \"I could eat bananas all day\"x = txt.partition(\"bananas\")\nprint(x)",
        "Parameter": "value",
        "eg_Description": "Required. The string to search for"
    },
    {
        "function": "replace()",
        "link": "ref_string_replace.asp",
        "description": "Returns a string   where a specified value is replaced with a specified value",
        "query": "Replace the word \"bananas\":",
        "eg": "\n    txt = \"I like bananas\"x = txt.replace(\"bananas\", \"apples\")print(x)",
        "Parameter": "oldvalue",
        "eg_Description": "Required. The string to search for"
    },
    {
        "function": "rfind()",
        "link": "ref_string_rfind.asp",
        "description": "Searches the string for   a specified value and returns the last position of where it was found",
        "query": "Where in the text is the last occurrence of the string \"casa\"?:",
        "eg": "\n    txt = \"Mi \n    casa, su casa.\"x = txt.rfind(\"casa\")print(x)",
        "Parameter": "value",
        "eg_Description": "Required. The value to search for"
    },
    {
        "function": "rindex()",
        "link": "ref_string_rindex.asp",
        "description": "Searches the string for   a specified value and returns the last position of where it was found",
        "query": "Where in the text is the last occurrence of the string \"casa\"?:",
        "eg": "\n    txt = \"Mi \n    casa, su casa.\"x = txt.rindex(\"casa\")print(x)",
        "Parameter": "value",
        "eg_Description": "Required. The value to search for"
    },
    {
        "function": "rjust()",
        "link": "ref_string_rjust.asp",
        "description": "Returns a right justified   version of the string",
        "query": "Return a 20 characters long, right justified version of the word \"banana\":",
        "eg": "\n    txt = \"banana\"x = txt.rjust(20)print(x, \"is my \n    favorite fruit.\")",
        "Parameter": "length",
        "eg_Description": "Required. The length of the returned string"
    },
    {
        "function": "rpartition()",
        "link": "ref_string_rpartition.asp",
        "description": "Returns a tuple   where the string is parted into three parts",
        "query": "Search for the last occurrence of the word \"bananas\", and return a tuple with three elements:",
        "eg": "\n    txt = \"I could eat bananas all day, bananas are my favorite fruit\"x = txt.rpartition(\"bananas\")\nprint(x)",
        "Parameter": "value",
        "eg_Description": "Required. The string to search for"
    },
    {
        "function": "rsplit()",
        "link": "ref_string_rsplit.asp",
        "description": "Splits the string at   the specified separator, and returns a list",
        "query": "Split a string into a list, using comma, followed by a space (, ) as the  separator:",
        "eg": "\n    txt = \"apple, banana, cherry\"x = txt.rsplit(\", \")\n    print(x)",
        "Parameter": "separator",
        "eg_Description": "Optional. Specifies the separator to use when splitting the string. By default   any whitespace is a separator"
    },
    {
        "function": "rstrip()",
        "link": "ref_string_rstrip.asp",
        "description": "Returns a right trim   version of the string",
        "query": "Remove any white spaces at the end of the string:",
        "eg": "\n    txt = \"\u00a0\u00a0\u00a0\u00a0 banana\u00a0\u00a0\u00a0\u00a0 \"x = \n    txt.rstrip()\n    print(\"of all fruits\", x, \"is my favorite\")",
        "Parameter": "characters",
        "eg_Description": "Optional. A set of characters to remove as trailing characters"
    },
    {
        "function": "split()",
        "link": "ref_string_split.asp",
        "description": "Splits the string at   the specified separator, and returns a list",
        "query": "Split a string into a list where each word is a list item:",
        "eg": "\n    txt = \"welcome to the jungle\"x = txt.split()\n    print(x)",
        "Parameter": "separator",
        "eg_Description": "Optional. Specifies the separator to use when splitting the string.   By default any whitespace is a separator"
    },
    {
        "function": "splitlines()",
        "link": "ref_string_splitlines.asp",
        "description": "Splits the string   at line breaks and returns a list",
        "query": "Split a string into a list where each line is a list item:",
        "eg": "\n    txt = \"Thank \n    you for the music\\nWelcome to the jungle\"x = txt.splitlines()\n    print(x)",
        "Parameter": "keeplinebreaks",
        "eg_Description": "Optional. Specifies if the line breaks should be included (True), or not   (False). Default value is False"
    },
    {
        "function": "startswith()",
        "link": "ref_string_startswith.asp",
        "description": "Returns true if   the string starts with the specified value",
        "query": "Check if the string starts with \"Hello\":",
        "eg": "\n    txt = \"Hello, welcome to my world.\"x = txt.startswith(\"Hello\")print(x)",
        "Parameter": "value",
        "eg_Description": "Required. The value to check if the string starts with. This value parameter can also be a tuple, then the method returns true if the string starts with any of the tuple values."
    },
    {
        "function": "strip()",
        "link": "ref_string_strip.asp",
        "description": "Returns a trimmed version of the string",
        "query": "Remove spaces at the beginning and at the end of the string:",
        "eg": "\n    txt = \"\u00a0\u00a0\u00a0\u00a0 banana\u00a0\u00a0\u00a0\u00a0 \"x = \n    txt.strip()\n    print(\"of all fruits\", x, \"is my favorite\")",
        "Parameter": "characters",
        "eg_Description": "Optional. A set of characters to remove as leading/trailing characters"
    },
    {
        "function": "swapcase()",
        "link": "ref_string_swapcase.asp",
        "description": "Swaps cases, lower   case becomes upper case and vice versa",
        "query": "Make the lower case letters upper case and the upper case letters lower  case:",
        "eg": "\n    txt = \"Hello My Name Is PETER\"x = txt.swapcase()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "title()",
        "link": "ref_string_title.asp",
        "description": "Converts the first   character of each word to upper case",
        "query": "Make the first letter in each word upper case:",
        "eg": "\n    txt = \"Welcome to my world\"x = txt.title()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "translate()",
        "link": "ref_string_translate.asp",
        "description": "Returns a   translated string",
        "query": "Replace any \"S\" characters with a \"P\" character:",
        "eg": "\n    #use a dictionary with ascii codes to replace 83 (S) with 80 (P):mydict \n    = {83:\u00a0 80}txt = \"Hello Sam!\"print(txt.translate(mydict))",
        "Parameter": "table",
        "eg_Description": "Required. Either a dictionary, or a mapping table describing how to   perform the replace"
    },
    {
        "function": "upper()",
        "link": "ref_string_upper.asp",
        "description": "Converts a string   into upper case",
        "query": "Upper case the string:",
        "eg": "\n    txt = \"Hello my friends\"x = txt.upper()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "zfill()",
        "link": "ref_string_zfill.asp",
        "description": "Fills the string with  a specified number of 0 values at the beginning",
        "query": "Fill the string with zeros until it is 10 characters long:",
        "eg": "\n    txt = \"50\"x = txt.zfill(10)print(x)",
        "Parameter": "len",
        "eg_Description": "Required. A number specifying the desired length of the string"
    },
    {
        "function": "append()",
        "link": "ref_list_append.asp",
        "description": "Adds an element at  the end of the list",
        "query": "Add an element to the fruits list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry']fruits.append(\"orange\")\n  ",
        "Parameter": "elmnt",
        "eg_Description": "Required. An element of any type (string, number, object etc.)"
    },
    {
        "function": "clear()",
        "link": "ref_list_clear.asp",
        "description": "Removes all the  elements from the list",
        "query": "Remove all elements from the fruits list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry', 'orange']fruits.clear()\n  ",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "copy()",
        "link": "ref_list_copy.asp",
        "description": "Returns a copy of the  list",
        "query": "Copy the fruits list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry', 'orange']x = fruits.copy()\n  ",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "count()",
        "link": "ref_list_count.asp",
        "description": "Returns the number of  elements with the specified value",
        "query": "Return the number of times the value \"cherry\" appears in the fruits list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry']x = fruits.count(\"cherry\")\n  ",
        "Parameter": "value",
        "eg_Description": "Required. Any type (string, number, list, tuple, etc.). The value to search for."
    },
    {
        "function": "extend()",
        "link": "ref_list_extend.asp",
        "description": "Add the elements of a  list (or any iterable), to the end of the current list",
        "query": "Add the elements of cars to the fruits list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry']\n    cars = ['Ford', 'BMW', 'Volvo']\n    fruits.extend(cars)\n  ",
        "Parameter": "iterable",
        "eg_Description": "Required. Any iterable (list, set, tuple, etc.)"
    },
    {
        "function": "index()",
        "link": "ref_list_index.asp",
        "description": "Returns the index of  the first element with the specified value",
        "query": "What is the position of the value \"cherry\":",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry']\n    x = fruits.index(\"cherry\")",
        "Parameter": "elmnt",
        "eg_Description": "Required. Any type (string, number, list, etc.). The element to search for"
    },
    {
        "function": "insert()",
        "link": "ref_list_insert.asp",
        "description": "Adds an element at  the specified position",
        "query": "Insert the value \"orange\" as the second element of the fruit list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry']\n    fruits.insert(1, \"orange\")",
        "Parameter": "pos",
        "eg_Description": "Required. A number specifying in which position to insert the value"
    },
    {
        "function": "pop()",
        "link": "ref_list_pop.asp",
        "description": "Removes the element at the  specified position",
        "query": "Remove the second element of the fruit list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry']\n    fruits.pop(1)",
        "Parameter": "pos",
        "eg_Description": "Optional. A number specifying the position of the element you want to   remove, default value is -1, which returns the last item"
    },
    {
        "function": "remove()",
        "link": "ref_list_remove.asp",
        "description": "Removes the first  item with the specified value",
        "query": "Remove the \"banana\" element of the fruit list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry']\n    fruits.remove(\"banana\")",
        "Parameter": "elmnt",
        "eg_Description": "Required. Any type (string, number, list etc.) The element you want to   remove"
    },
    {
        "function": "reverse()",
        "link": "ref_list_reverse.asp",
        "description": "Reverses the order  of the list",
        "query": "Reverse the order of the fruit list:",
        "eg": "\n    fruits = ['apple', 'banana', 'cherry']\n    fruits.reverse()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "sort()",
        "link": "ref_list_sort.asp",
        "description": "Sorts the list",
        "query": "Sort the list alphabetically:",
        "eg": "\n    cars = ['Ford', 'BMW', 'Volvo']\n    cars.sort()",
        "Parameter": "reverse",
        "eg_Description": "Optional. reverse=True will sort the list descending. Default is   reverse=False"
    },
    {
        "function": "clear()",
        "link": "ref_dictionary_clear.asp",
        "description": "Removes all the elements from the dictionary",
        "query": "Remove all elements from the car list:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}car.clear()print(car)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "copy()",
        "link": "ref_dictionary_copy.asp",
        "description": "Returns a copy of the dictionary",
        "query": "Copy the car dictionary:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}\nx = car.copy()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "fromkeys()",
        "link": "ref_dictionary_fromkeys.asp",
        "description": "Returns a dictionary with the specified keys and value",
        "query": "Create a dictionary with 3 keys, all with the value 0:",
        "eg": "\n    x = ('key1', 'key2', 'key3')y = 0thisdict = dict.fromkeys(x, y)\nprint(thisdict)\n  ",
        "Parameter": "keys",
        "eg_Description": "Required. An iterable specifying the keys of the new dictionary"
    },
    {
        "function": "get()",
        "link": "ref_dictionary_get.asp",
        "description": "Returns the value of the specified key",
        "query": "Get the value of the \"model\" item:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}\nx = car.get(\"model\")print(x)",
        "Parameter": "keyname",
        "eg_Description": "Required. The keyname of the item you want to return the value from"
    },
    {
        "function": "items()",
        "link": "ref_dictionary_items.asp",
        "description": "Returns a list containing a tuple for each key value pair",
        "query": "Return the dictionary's key-value pairs:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}x = car.items()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "keys()",
        "link": "ref_dictionary_keys.asp",
        "description": "Returns a list containing the dictionary's keys",
        "query": "Return the keys:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}x = car.keys()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "pop()",
        "link": "ref_dictionary_pop.asp",
        "description": "Removes the element with the specified key",
        "query": "Remove \"model\" from the dictionary:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}\ncar.pop(\"model\")print(car)",
        "Parameter": "keyname",
        "eg_Description": "Required. The keyname of the item you want to remove"
    },
    {
        "function": "popitem()",
        "link": "ref_dictionary_popitem.asp",
        "description": "Removes the last  inserted key-value pair",
        "query": "Remove the last item from the dictionary:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}\ncar.popitem()print(car)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "setdefault()",
        "link": "ref_dictionary_setdefault.asp",
        "description": "Returns the value of the specified key. If the key does not exist: insert the key, with the specified value",
        "query": "Get the value of the \"model\" item:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}\nx = car.setdefault(\"model\", \"Bronco\")print(x)",
        "Parameter": "keyname",
        "eg_Description": "Required. The keyname of the item you want to return the value from"
    },
    {
        "function": "update()",
        "link": "ref_dictionary_update.asp",
        "description": "Updates the dictionary with the specified key-value pairs",
        "query": "Insert an item to the dictionary:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}\ncar.update({\"color\": \"White\"})print(car)",
        "Parameter": "iterable",
        "eg_Description": "A dictionary or an iterable object with key value pairs, that will be   inserted to the dictionary"
    },
    {
        "function": "values()",
        "link": "ref_dictionary_values.asp",
        "description": "Returns a list of all the values in the dictionary",
        "query": "Return the values:",
        "eg": "\n    car = {\u00a0 \"brand\": \"Ford\",\u00a0 \"model\": \"Mustang\",\u00a0 \n    \"year\": 1964}x = car.values()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "count()",
        "link": "ref_tuple_count.asp",
        "description": "Returns the number of times a specified value occurs in a tuple",
        "query": "Return the number of times the value 5 appears in the tuple:",
        "eg": "\n    thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)x = thistuple.count(5)\nprint(x)",
        "Parameter": "value",
        "eg_Description": "Required. The item to search for"
    },
    {
        "function": "index()",
        "link": "ref_tuple_index.asp",
        "description": "Searches the tuple for a specified value and returns the position of where it was found",
        "query": "Search for the first occurrence of the value 8, and return its  position:",
        "eg": "\n    thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)x = thistuple.index(8)\nprint(x)",
        "Parameter": "value",
        "eg_Description": "Required. The item to search for"
    },
    {
        "function": "close()",
        "link": "ref_file_close.asp",
        "description": "Closes the file",
        "query": "Close a file after it has been opened:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.read())f.close()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "detach()",
        "link": "No link",
        "description": "Returns the separated   raw stream from the buffer",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "fileno()",
        "link": "ref_file_fileno.asp",
        "description": "Returns a number that   represents the stream, from the operating system's perspective",
        "query": "Return the file descriptor of the stream:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.fileno())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "flush()",
        "link": "ref_file_flush.asp",
        "description": "Flushes the internal   buffer",
        "query": "You can clear the buffer when writing to a file:",
        "eg": "\n    f = open(\"myfile.txt\", \"a\")f.write(\"Now the file has one more line!\")\n    f.flush()f.write(\"...and another one!\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "isatty()",
        "link": "ref_file_isatty.asp",
        "description": "Returns whether the   file stream is interactive or not",
        "query": "Check if the file is connected to a terminal device:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.isatty())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "read()",
        "link": "ref_file_read.asp",
        "description": "Returns the file content",
        "query": "Read the content of the file \"demofile.txt\":",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.read())",
        "Parameter": "size",
        "eg_Description": "Optional. The number of bytes to return. Default -1, which means the whole file."
    },
    {
        "function": "readable()",
        "link": "ref_file_readable.asp",
        "description": "Returns whether   the file stream can be read or not",
        "query": "Check if the file is readable:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.readable())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "readline()",
        "link": "ref_file_readline.asp",
        "description": "Returns one line   from the file",
        "query": "Read the first line of the file \"demofile.txt\":",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.readline())",
        "Parameter": "size",
        "eg_Description": "Optional. The number of bytes from the line to return. Default -1, which means the whole   line."
    },
    {
        "function": "readlines()",
        "link": "ref_file_readlines.asp",
        "description": "Returns a list   of lines from the file",
        "query": "Return all lines in the file, as a list where each line is an item in the  list object:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.readlines())",
        "Parameter": "hint",
        "eg_Description": "Optional. If the number of bytes returned exceed the hint number, no   more lines will be returned. Default value is\u00a0 -1, which means all   lines will be returned."
    },
    {
        "function": "seek()",
        "link": "ref_file_seek.asp",
        "description": "Change the file position",
        "query": "Change the current file position to 4, and return the rest of the line:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")\n    f.seek(4)print(f.readline())",
        "Parameter": "offset",
        "eg_Description": "Required. A number representing the position to set the current file   stream position."
    },
    {
        "function": "seekable()",
        "link": "ref_file_seekable.asp",
        "description": "Returns whether   the file allows us to change the file position",
        "query": "Check if the file is seekable:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")print(f.seekable())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "tell()",
        "link": "ref_file_tell.asp",
        "description": "Returns the current file   position",
        "query": "Find the current file position:",
        "eg": "\n    f = open(\"demofile.txt\", \"r\")\n    print(f.tell())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "truncate()",
        "link": "ref_file_truncate.asp",
        "description": "Resizes the file   to a specified size",
        "query": "Open the file with \"a\" for appending, then truncate the file to 20 bytes:",
        "eg": "\n    f = open(\"demofile2.txt\", \"a\")f.truncate(20)f.close()#open \n    and read the file after the truncate:f = open(\"demofile2.txt\", \"r\")\n    print(f.read())",
        "Parameter": "size",
        "eg_Description": "Optional. The size of the file (in bytes) after the truncate. Default   None, which means the current file stream position."
    },
    {
        "function": "writable()",
        "link": "ref_file_writable.asp",
        "description": "Returns whether   the file can be written to or not",
        "query": "Check if the file is writable:",
        "eg": "\n    f = open(\"demofile.txt\", \"a\")print(f.writable())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "write()",
        "link": "ref_file_write.asp",
        "description": "Writes the specified   string to the file",
        "query": "Open the file with \"a\" for appending, then add some text to the  file:",
        "eg": "\n    f = open(\"demofile2.txt\", \"a\")f.write(\"See \n    you soon!\")f.close()#open \n    and read the file after the appending:f = open(\"demofile2.txt\", \"r\")\n    print(f.read())",
        "Parameter": "byte",
        "eg_Description": "The text or byte object that will be inserted."
    },
    {
        "function": "writelines()",
        "link": "ref_file_writelines.asp",
        "description": "Writes a list   of strings to the file",
        "query": "Open the file with \"a\" for appending, then add a list of texts to append to the file:",
        "eg": "\n    f = open(\"demofile3.txt\", \"a\")f.writelines([\"See \n    you soon!\", \"Over and out.\"])f.close()#open \n    and read the file after the appending:f = open(\"demofile3.txt\", \"r\")\n    print(f.read())",
        "Parameter": "list",
        "eg_Description": "The list of texts or byte objects that will be inserted."
    },
    {
        "function": "and",
        "link": "ref_keyword_and.asp",
        "description": "A logical operator",
        "query": "Return True if both statements are True:",
        "eg": "\n    x = (5 > 3 and 5 < 10)print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "as",
        "link": "ref_keyword_as.asp",
        "description": "To create an alias",
        "query": "Refer to the calendar module as c:",
        "eg": "\n    import calendar as cprint(c.month_name[1])",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "assert",
        "link": "ref_keyword_assert.asp",
        "description": "For debugging",
        "query": "Test if a condition returns True:",
        "eg": "\n    x = \"hello\"#if condition returns True, then nothing happens:assert x == \"hello\"#if condition returns \n    False, AssertionError is raised:assert x == \"goodbye\"",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "break",
        "link": "ref_keyword_break.asp",
        "description": "To break out of a loop",
        "query": "End the loop if i is larger than 3:",
        "eg": "\n    for i in range(9):\u00a0 if i > 3:\u00a0\u00a0\u00a0 break\u00a0 \n    print(i)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "class",
        "link": "ref_keyword_class.asp",
        "description": "To define a class",
        "query": "Create a class named \"Person\":",
        "eg": "\n    class Person:\u00a0 name = \"John\"\u00a0 age = 36",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "continue",
        "link": "ref_keyword_continue.asp",
        "description": "To continue to the   next iteration of a loop",
        "query": "Skip the iteration if the variable i is 3, but continue with the next iteration:",
        "eg": "\n    for i in range(9):\u00a0 if i == 3:\u00a0\u00a0\u00a0 continue\u00a0 \n    print(i)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "def",
        "link": "ref_keyword_def.asp",
        "description": "To define a function",
        "query": "Create and execute a function:",
        "eg": "\n    def my_function():\u00a0 print(\"Hello from a function\")\n    my_function()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "del",
        "link": "ref_keyword_del.asp",
        "description": "To delete an object",
        "query": "Delete an object:",
        "eg": "\n    class MyClass:\u00a0 name = \"John\"del MyClassprint(MyClass)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "elif",
        "link": "ref_keyword_elif.asp",
        "description": "Used in conditional   statements, same as else if",
        "query": "Print \"YES\" if the variable i is a positive number, print \"WHATEVER\" if i  is 0, otherwise print \"NO\":",
        "eg": "\n    for i in range(-5, 5):\u00a0 if i > 0:\u00a0\u00a0\u00a0 \n    print(\"YES\")\u00a0 elif i == 0:\u00a0\u00a0\u00a0 print(\"WHATEVER\")\u00a0 \n    else:\u00a0\u00a0\u00a0 print(\"NO\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "else",
        "link": "ref_keyword_else.asp",
        "description": "Used in conditional   statements",
        "query": "Print \"YES\" if x larger than 3, otherwise print \"NO\":",
        "eg": "\n    x = 2if x > 3:\u00a0 \n    print(\"YES\")else:\u00a0 print(\"NO\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "except",
        "link": "ref_keyword_except.asp",
        "description": "Used with exceptions,   what to do when an exception occurs",
        "query": "If the statement raises an error print \"Something went wrong\":",
        "eg": "\n    try:\u00a0 x > 3except:\u00a0 print(\"Something went wrong\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "False",
        "link": "ref_keyword_false.asp",
        "description": "Boolean value, result of   comparison operations",
        "query": "Print the result of the comparison \"5 is larger than 6\":",
        "eg": "\n    print(5 > 6)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "finally",
        "link": "ref_keyword_finally.asp",
        "description": "Used with exceptions, a   block of code that will be executed no matter if there is an exception or   not",
        "query": "The finally block will always be executed, no matter if the try block  raises an error or not:",
        "eg": "\n    try:\u00a0 x > 3except:\u00a0 print(\"Something went wrong\")\n    else:\u00a0 print(\"Nothing went wrong\")finally:\u00a0 print(\"The \n    try...except block is finished\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "for",
        "link": "ref_keyword_for.asp",
        "description": "To create a for loop",
        "query": "Print each number from 1 to 8:",
        "eg": "\n    for x in range(1, 9):\u00a0 \n    print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "from",
        "link": "ref_keyword_from.asp",
        "description": "To import specific parts of   a module",
        "query": "Import only the time section from the datetime module, and print  the time as if it was 15:00:",
        "eg": "\n    from datetime import timex = time(hour=15)print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "global",
        "link": "ref_keyword_global.asp",
        "description": "To declare a global   variable",
        "query": "Declare a global variable inside a function, and use it outside  the function:",
        "eg": "\n    #create a function:def myfunction():\u00a0 global x\u00a0 x = \n    \"hello\"#execute the function:myfunction()#x should now \n    be global, and accessible in the global scope.print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "if",
        "link": "ref_keyword_if.asp",
        "description": "To make a conditional   statement",
        "query": "Print \"YES\" if x larger than 3:",
        "eg": "\n    x = 5if x > 3:\u00a0 \n    print(\"YES\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "import",
        "link": "ref_keyword_import.asp",
        "description": "To import a module",
        "query": "Import the datetime module and display the current date  and time:",
        "eg": "\n    import datetimex = datetime.datetime.now()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "in",
        "link": "ref_keyword_in.asp",
        "description": "To check if a value is   present in a list, tuple, etc.",
        "query": "Check if \"banana\" is present in the list:",
        "eg": "\n    fruits = [\"apple\", \"banana\", \"cherry\"]if \"banana\" in fruits:\u00a0 \n    print(\"yes\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "is",
        "link": "ref_keyword_is.asp",
        "description": "To test if two variables are   equal",
        "query": "Check if two objects are the same object:",
        "eg": "\n    x = [\"apple\", \"banana\", \"cherry\"]y = xprint(x is y)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "lambda",
        "link": "ref_keyword_lambda.asp",
        "description": "To create an anonymous   function",
        "query": "Create a function that adds 10 to any number you send:",
        "eg": "\n    x = lambda a : a + 10print(x(5))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "None",
        "link": "ref_keyword_none.asp",
        "description": "Represents a null value",
        "query": "Assign the value None to a variable:",
        "eg": "\n    x = Noneprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "nonlocal",
        "link": "ref_keyword_nonlocal.asp",
        "description": "To declare a   non-local variable",
        "query": "Make a function inside a function, which uses the variable x as a non local  variable:",
        "eg": "\n    def myfunc1():\u00a0 x = \"John\"\u00a0 def myfunc2():\u00a0\u00a0\u00a0 \n    nonlocal x\u00a0\u00a0\u00a0 x = \"hello\"\u00a0 myfunc2() \u00a0 \n    return xprint(myfunc1())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "not",
        "link": "ref_keyword_not.asp",
        "description": "A logical operator",
        "query": "Return True if the statement is not True:",
        "eg": "\n    x = Falseprint(not x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "or",
        "link": "ref_keyword_or.asp",
        "description": "A logical operator",
        "query": "Return True if one of the statements are True:",
        "eg": "\n    x = (5 > 3 or 5 > 10)print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "pass",
        "link": "ref_keyword_pass.asp",
        "description": "A null statement, a  statement that will do nothing",
        "query": "Create a placeholder for future code:",
        "eg": "\n    for x in [0, 1, 2]:\u00a0 pass",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "raise",
        "link": "ref_keyword_raise.asp",
        "description": "To raise an exception",
        "query": "Raise an error and stop the program if x is lower than 0:",
        "eg": "\n    x = -1if x < 0:\u00a0 raise Exception(\"Sorry, no numbers below \n    zero\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "return",
        "link": "ref_keyword_return.asp",
        "description": "To exit a function and  return a value",
        "query": "Exit a function and return the sum:",
        "eg": "\n    def myfunction():\u00a0 return 3+3print(myfunction())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "True",
        "link": "ref_keyword_true.asp",
        "description": "Boolean value, result of   comparison operations",
        "query": "Print the result of the comparison \"7 is larger than 6\":",
        "eg": "\n    print(7 > 6)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "try",
        "link": "ref_keyword_try.asp",
        "description": "To make a try...except  statement",
        "query": "Try a block of code, and decide what to to if it raises an error:",
        "eg": "\n    try:\u00a0 x > 3except:\u00a0 print(\"Something went wrong\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "while",
        "link": "ref_keyword_while.asp",
        "description": "To create a while loop",
        "query": "Print x as long as x is less than 9:",
        "eg": "\n    x = 0while x < 9:\u00a0 print(x)\u00a0 x = x + 1",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "with",
        "link": "No link",
        "description": "Used to simplify  exception handling",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "yield",
        "link": "ref_keyword_yield.asp",
        "description": "To return a list of values from a generator",
        "query": "Return three values from a function:",
        "eg": "\n    def myFunc():\u00a0 yield \"Hello\"\u00a0 yield 51\u00a0 yield \n    \"Good Bye\"x = myFunc()for z in x:\u00a0 print(z)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "ArithmeticError",
        "link": "No link",
        "description": "Raised when an error occurs in numeric calculations",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "AssertionError",
        "link": "No link",
        "description": "Raised when an assert statement fails",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "AttributeError",
        "link": "No link",
        "description": "Raised when attribute reference or assignment fails",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Exception",
        "link": "No link",
        "description": "Base class for all exceptions",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "EOFError",
        "link": "No link",
        "description": "Raised when    the input() method hits an \"end of file\" condition (EOF)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "FloatingPointError",
        "link": "No link",
        "description": "Raised when a floating point calculation fails",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "GeneratorExit",
        "link": "No link",
        "description": "Raised when a generator is closed (with the close() method)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "ImportError",
        "link": "No link",
        "description": "Raised when an imported module does not exist",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "IndentationError",
        "link": "No link",
        "description": "Raised when indentation is not correct",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "IndexError",
        "link": "No link",
        "description": "Raised when an index of a sequence does not exist",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "KeyError",
        "link": "No link",
        "description": "Raised when a key does not exist in a dictionary",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "KeyboardInterrupt",
        "link": "No link",
        "description": "Raised when the user presses Ctrl+c,    Ctrl+z or Delete",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "LookupError",
        "link": "No link",
        "description": "Raised when errors raised cant be found",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "MemoryError",
        "link": "No link",
        "description": "Raised when a program runs out of memory",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "NameError",
        "link": "No link",
        "description": "Raised when a variable does not exist",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "NotImplementedError",
        "link": "No link",
        "description": "Raised when an abstract method requires an inherited class to override the    method",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "OSError",
        "link": "No link",
        "description": "Raised when a system related operation causes an error",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "OverflowError",
        "link": "No link",
        "description": "Raised when the result of a numeric calculation is too large",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "ReferenceError",
        "link": "No link",
        "description": "Raised when a weak reference object does not exist",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "RuntimeError",
        "link": "No link",
        "description": "Raised when an error occurs that do not belong to any specific exceptions",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "StopIteration",
        "link": "No link",
        "description": "Raised when the next() method of an iterator has no further values",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "SyntaxError",
        "link": "No link",
        "description": "Raised when a syntax error occurs",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "TabError",
        "link": "No link",
        "description": "Raised when indentation consists of tabs or spaces",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "SystemError",
        "link": "No link",
        "description": "Raised when a system error occurs",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "SystemExit",
        "link": "No link",
        "description": "Raised when the sys.exit() function is called",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "TypeError",
        "link": "No link",
        "description": "Raised when two different types are combined",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "UnboundLocalError",
        "link": "No link",
        "description": "Raised when a local variable is referenced before assignment",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "UnicodeError",
        "link": "No link",
        "description": "Raised when a unicode problem occurs",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "UnicodeEncodeError",
        "link": "No link",
        "description": "Raised when a unicode encoding problem occurs",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "UnicodeDecodeError",
        "link": "No link",
        "description": "Raised when a unicode decoding problem occurs",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "UnicodeTranslateError",
        "link": "No link",
        "description": "Raised when a unicode translation problem occurs",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "ValueError",
        "link": "No link",
        "description": "Raised when there is a wrong value in a specified data type",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "ZeroDivisionError",
        "link": "No link",
        "description": "Raised when the second operator in a division is zero",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Indentation",
        "link": "gloss_python_indentation.asp",
        "description": "Indentation refers to the spaces at the beginning of a code line",
        "query": null,
        "eg": "\n  if 5 > 2:\u00a0\nprint(\"Five is greater than two!\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Comments",
        "link": "gloss_python_comments.asp",
        "description": "Comments are code lines that will not be executed",
        "query": null,
        "eg": "\n#This is a comment\nprint(\"Hello, World!\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Multiline Comments",
        "link": "gloss_python_multi_line_comments.asp",
        "description": "How to insert comments on multiple lines",
        "query": null,
        "eg": "\n  #This is a comment#written in#more than just one lineprint(\"Hello, \n  World!\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Creating Variables",
        "link": "gloss_python_creating_variables.asp",
        "description": "Variables are containers for storing data values",
        "query": null,
        "eg": "\nx = 5\ny = \"John\"\nprint(x)\nprint(y)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Variable Names",
        "link": "gloss_python_variable_names.asp",
        "description": "How to name your variables",
        "query": null,
        "eg": "\n  #Legal variable names:myvar = \"John\"my_var = \"John\"_my_var = \"John\"myVar = \"John\"\n  MYVAR = \"John\"myvar2 = \"John\"#Illegal variable names:2myvar = \"John\"my-var = \"John\"\n  my var = \"John\"",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Assign Values to Multiple Variables",
        "link": "gloss_python_assign_value_to_multiple_variables.asp",
        "description": "How to assign values to multiple variables",
        "query": null,
        "eg": "\n  x, y, z = \"Orange\", \"Banana\", \"Cherry\"print(x)print(y)print(z)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Output Variables",
        "link": "gloss_python_variable_output.asp",
        "description": "Use the print statement to output variables",
        "query": null,
        "eg": "\nx = \"Python is awesome\"print(x)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "String Concatenation",
        "link": "gloss_python_string_concatenation.asp",
        "description": "How to combine strings",
        "query": null,
        "eg": "\nx = \"Python is \"y = \"awesome\"z =\u00a0 x + y\nprint(z)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Global Variables",
        "link": "gloss_python_global_variables.asp",
        "description": "Global variables are variables that belongs to the global scope",
        "query": "Create a variable outside of a function, and use it inside the function",
        "eg": "\nx = \"awesome\"\n  def myfunc():\u00a0 print(\"Python is \" + x)myfunc()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Built-In Data Types",
        "link": "gloss_python_built-in_data_types.asp",
        "description": "Python has a set of built-in data types",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Getting Data Type",
        "link": "gloss_python_getting_data_type.asp",
        "description": "How to get the data type of an object",
        "query": "Print the data type of the variable x:",
        "eg": "\nx = 5\nprint(type(x))\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Setting Data Type",
        "link": "gloss_python_setting_data_type.asp",
        "description": "How to set the data type of an object",
        "query": null,
        "eg": null,
        "Parameter": "x = \"Hello World\"",
        "eg_Description": "str"
    },
    {
        "function": "Numbers",
        "link": "gloss_python_numbers.asp",
        "description": "There are three numeric types in Python",
        "query": null,
        "eg": "\nx = 1\u00a0\u00a0\u00a0 \n  # inty = 2.8\u00a0 # floatz = 1j\u00a0\u00a0 # complex\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Int",
        "link": "gloss_python_int.asp",
        "description": "The integer number type",
        "query": "Integers:",
        "eg": "\nx = 1y = 35656222554887711z = \n  -3255522print(type(x))print(type(y))print(type(z))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Float",
        "link": "gloss_python_float.asp",
        "description": "The floating number type",
        "query": "Floats:",
        "eg": "\nx = 1.10y = 1.0z = -35.59print(type(x))print(type(y))print(type(z))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Complex",
        "link": "gloss_python_complex.asp",
        "description": "The complex number type",
        "query": "Complex:",
        "eg": "\n  x = 3+5jy = 5jz = -5jprint(type(x))print(type(y))\n  print(type(z))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Type Conversion",
        "link": "gloss_python_type_conversion.asp",
        "description": "How to convert from one number type to another",
        "query": "Convert from one type to another:",
        "eg": "\n  x = 1 # inty = 2.8 # floatz = 1j # complex#convert from int to float:\n  a = float(x)#convert from float to int:\n  b = int(y)#convert from int to complex:c = complex(x)print(a)print(b)\n  print(c)print(type(a))print(type(b))\n  print(type(c))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Random Number",
        "link": "gloss_python_random_number.asp",
        "description": "How to create a random number",
        "query": "Import the random module, and display a random number between 1 and 9:",
        "eg": "\n  import randomprint(random.randrange(1,10))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Specify a Variable Type",
        "link": "gloss_python_specify_variable_type.asp",
        "description": "How to specify a certain data type for a variable",
        "query": "Integers:",
        "eg": "\nx = int(1)\u00a0\u00a0 # x will be 1\ny = int(2.8) # y will be 2\nz = int(\"3\") # z will be 3\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "String Literals",
        "link": "gloss_python_string_literals.asp",
        "description": "How to create string literals",
        "query": null,
        "eg": "\nprint(\"Hello\")\nprint('Hello')\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Assigning a String to a Variable",
        "link": "gloss_python_assign_string_variable.asp",
        "description": "How to assign a string value to a variable",
        "query": null,
        "eg": "\na = \"Hello\"print(a)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Multiline Strings",
        "link": "gloss_python_multi_line_strings.asp",
        "description": "How to create a multiline string",
        "query": "You can use three double quotes:",
        "eg": "\n  a = \"\"\"Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do \n  eiusmod tempor incididuntut labore et dolore magna aliqua.\"\"\"print(a)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Strings are Arrays",
        "link": "gloss_python_strings_are_arrays.asp",
        "description": "Strings in Python are arrays of bytes representing Unicode characters",
        "query": "Get the character at position 1 (remember that the first character has the position 0):",
        "eg": "\na = \"Hello, World!\"\nprint(a[1])\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Slicing a String",
        "link": "gloss_python_string_slice.asp",
        "description": "How to slice a string",
        "query": "Get the characters from position 2 to position 5 (not included):",
        "eg": "\nb = \"Hello, World!\"\n  print(b[2:5])\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Negative Indexing on a String",
        "link": "gloss_python_string_negative_indexing.asp",
        "description": "How to use negative indexing when accessing a string",
        "query": "Get the characters from position 5 to position 1, starting the count from the end of the string:",
        "eg": "\nb = \"Hello, World!\"\n  print(b[-5:-2])\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "String Length",
        "link": "gloss_python_string_length.asp",
        "description": "How to get the length of a string",
        "query": "The len() function returns the length of a string:",
        "eg": "\na = \"Hello, World!\"\nprint(len(a))\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Check In String",
        "link": "gloss_python_check_string.asp",
        "description": "How to check if a string contains a specified phrase",
        "query": "Check if the phrase \"ain\" is present in the following text:",
        "eg": "\n  txt = \"The rain in Spain stays mainly in the plain\"x = \"ain\" in txt\nprint(x)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Format String",
        "link": "gloss_python_string_format.asp",
        "description": "How to combine two strings",
        "query": null,
        "eg": "\n  age = 36txt = \"My name is John, I am \" + ageprint(txt)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Escape Characters",
        "link": "gloss_python_escape_characters.asp",
        "description": "How to use escape characters",
        "query": "You will get an error if you use double quotes inside a string that is surrounded by double quotes:",
        "eg": "\ntxt = \"We are the so-called \"Vikings\" from the north.\"\n",
        "Parameter": "\\'",
        "eg_Description": "Single Quote"
    },
    {
        "function": "Boolean Values",
        "link": "gloss_python_boolean_values.asp",
        "description": "True or False",
        "query": null,
        "eg": "\n  print(10 > 9)print(10 == 9)print(10 < 9)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Evaluate Booleans",
        "link": "gloss_python_evaluate_boolean_values.asp",
        "description": "Evaluate a value or statement and return either True or False",
        "query": "Evaluate a string and a number:",
        "eg": "\n  print(bool(\"Hello\"))print(bool(15))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Return Boolean Value",
        "link": "gloss_python_return_boolean.asp",
        "description": "Functions that return a Boolean value",
        "query": "Print the answer of a function:",
        "eg": "\n  def myFunction() :\u00a0 return Trueprint(myFunction())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Operators",
        "link": "gloss_python_operators.asp",
        "description": "Use operator to perform operations in Python",
        "query": "Arithmetic operators are used with numeric values to perform common mathematical operations:",
        "eg": "\n  print(5 + 3)print(5 - 3)print(5 * 3)print(12 / 3)print(5 % 2)\n  print(5 ** 2)print(15 // 2)\u00a0\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Arithmetic Operators",
        "link": "gloss_python_arithmetic_operators.asp",
        "description": "Arithmetic operator are used to perform common mathematical operations",
        "query": null,
        "eg": null,
        "Parameter": "+",
        "eg_Description": "Addition"
    },
    {
        "function": "Assignment Operators",
        "link": "gloss_python_assignment_operators.asp",
        "description": "Assignment operators are use to assign values to variables",
        "query": null,
        "eg": null,
        "Parameter": "=",
        "eg_Description": "x = 5"
    },
    {
        "function": "Comparison Operators",
        "link": "gloss_python_comparison_operators.asp",
        "description": "Comparison operators are used to compare two values",
        "query": null,
        "eg": null,
        "Parameter": "==",
        "eg_Description": "Equal"
    },
    {
        "function": "Logical Operators",
        "link": "gloss_python_logical_operators.asp",
        "description": "Logical operators are used to combine conditional statements",
        "query": null,
        "eg": null,
        "Parameter": "and",
        "eg_Description": "Returns True if both statements are true"
    },
    {
        "function": "Identity Operators",
        "link": "gloss_python_identity_operators.asp",
        "description": "Identity operators are used to see if two objects are in fact the same object",
        "query": null,
        "eg": null,
        "Parameter": "is",
        "eg_Description": "Returns true if both variables are the same object"
    },
    {
        "function": "Membership Operators",
        "link": "gloss_python_membership_operators.asp",
        "description": "Membership operators are used to test is a sequence is present in an object",
        "query": null,
        "eg": null,
        "Parameter": "in",
        "eg_Description": "Returns True if a sequence with the specified value is present in the object"
    },
    {
        "function": "Bitwise Operators",
        "link": "gloss_python_bitwise_operators.asp",
        "description": "Bitwise operators are used to compare (binary) numbers",
        "query": null,
        "eg": null,
        "Parameter": "&",
        "eg_Description": "AND"
    },
    {
        "function": "Lists",
        "link": "gloss_python_lists.asp",
        "description": "A list is an ordered, and changeable, collection",
        "query": "Create a List:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Access List Items",
        "link": "gloss_python_access_list_items.asp",
        "description": "How to access items in a list",
        "query": "Print the second item of the list:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist[1])\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Change List Item",
        "link": "gloss_python_change_list_item.asp",
        "description": "How to change the value of a list item",
        "query": "Change the second item:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist[1] = \"blackcurrant\"\nprint(thislist)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Loop Through List Items",
        "link": "gloss_python_loop_list_items.asp",
        "description": "How to loop through the items in a list",
        "query": "Print all items in the list, one by one:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]\n  for x in thislist:\u00a0 print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "List Comprehension",
        "link": "gloss_python_list_comprehension.asp",
        "description": "How use a list comprehensive",
        "query": null,
        "eg": "\n  fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]newlist = []\nfor x in fruits:\u00a0 if \"a\" in x:\u00a0\u00a0\u00a0 \n  newlist.append(x)print(newlist)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Check if List Item Exists",
        "link": "gloss_python_check_if_list_item_exists.asp",
        "description": "How to check if a specified item is present in a list",
        "query": "Check if \"apple\" is present in the list:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]\n  if \"apple\" in thislist:\u00a0 print(\"Yes, 'apple' is in the fruits list\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "List Length",
        "link": "gloss_python_list_length.asp",
        "description": "How to determine the length of a list",
        "query": "Print the number of items in the list:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Add List Items",
        "link": "gloss_python_add_list_items.asp",
        "description": "How to add items to a list",
        "query": "Using the append() method to append an item:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.append(\"orange\")\nprint(thislist)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Remove List Items",
        "link": "gloss_python_remove_list_items.asp",
        "description": "How to remove list items",
        "query": "The remove() method removes the specified item:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.remove(\"banana\")\nprint(thislist)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Copy a List",
        "link": "gloss_python_copy_list.asp",
        "description": "How to copy a list",
        "query": "Make a copy of a list with the copy() method:",
        "eg": "\nthislist = [\"apple\", \"banana\", \"cherry\"]mylist \n  = thislist.copy()\n  print(mylist)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Join Two Lists",
        "link": "gloss_python_join_lists.asp",
        "description": "How to join two lists",
        "query": "Join two list:",
        "eg": "\n  list1 = [\"a\", \"b\" , \"c\"]list2 = [1, 2, 3]list3 = list1 + list2\n  print(list3)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Tuple",
        "link": "gloss_python_tuple.asp",
        "description": "A tuple is an ordered, and unchangeable, collection",
        "query": "Create a Tuple:",
        "eg": "\nthistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Access Tuple Items",
        "link": "gloss_python_access_tuple_items.asp",
        "description": "How to access items in a tuple",
        "query": "Print the second item in the tuple:",
        "eg": "\nthistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple[1])\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Change Tuple Item",
        "link": "gloss_python_change_tuple_item.asp",
        "description": "How to change the value of a tuple item",
        "query": "Convert the tuple into a list to be able to change it:",
        "eg": "\n  x = (\"apple\", \"banana\", \"cherry\")y = list(x)y[1] = \"kiwi\"x = \n  tuple(y)print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Loop List Items",
        "link": "gloss_python_loop_tuple_items.asp",
        "description": "How to loop through the items in a tuple",
        "query": "Iterate through the items and print the values:",
        "eg": "\nthistuple = (\"apple\", \"banana\", \"cherry\")\n  for x in thistuple:\u00a0 print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Check if Tuple Item Exists",
        "link": "gloss_python_check_if_tuple_item_exists.asp",
        "description": "How to check if a specified item is present in a tuple",
        "query": "Check if \"apple\" is present in the tuple:",
        "eg": "\nthistuple = (\"apple\", \"banana\", \"cherry\")\n  if \"apple\" in thistuple:\u00a0 print(\"Yes, 'apple' is in the fruits tuple\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Tuple Length",
        "link": "gloss_python_tuple_length.asp",
        "description": "How to determine the length of a tuple",
        "query": "Print the number of items in the tuple:",
        "eg": "\nthistuple = (\"apple\", \"banana\", \"cherry\")\n  print(len(thistuple))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Tuple With One Item",
        "link": "gloss_python_tuple_one_item.asp",
        "description": "How to create a tuple with only one item",
        "query": "One item tuple, remember the commma:",
        "eg": "\nthistuple = (\"apple\",)\n  print(type(thistuple))#NOT a tuplethistuple = (\"apple\")\n  print(type(thistuple))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Remove Tuple Items",
        "link": "gloss_python_remove_tuple_items.asp",
        "description": "How to remove tuple items",
        "query": "The del keyword can delete the tuple completely:",
        "eg": "\nthistuple = (\"apple\", \"banana\", \"cherry\")\n  del\nthistupleprint(thistuple)\n  #this will raise an error because the tuple no longer exists",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Join Two Tuples",
        "link": "gloss_python_join_tuple.asp",
        "description": "How to join two tuples",
        "query": "Join two tuples:",
        "eg": "\n  tuple1 = (\"a\", \"b\" , \"c\")tuple2 = (1, 2, 3)\n  tuple3 = tuple1 + tuple2\n  print(tuple3)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Set",
        "link": "gloss_python_set.asp",
        "description": "A set is an unordered, and unchangeable, collection",
        "query": "Create a Set:",
        "eg": "\nthisset = {\"apple\", \"banana\", \"cherry\"}print(thisset)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Access Set Items",
        "link": "gloss_python_access_set_items.asp",
        "description": "How to access items in a set",
        "query": "Loop through the set, and print the values:",
        "eg": "\n  thisset = {\"apple\", \"banana\", \"cherry\"}for x in thisset:\u00a0 print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Add Set Items",
        "link": "gloss_python_add_set_items.asp",
        "description": "How to add items to a set",
        "query": "Add an item to a set, using the add() method:",
        "eg": "\n  thisset = {\"apple\", \"banana\", \"cherry\"}\n  thisset.add(\"orange\")print(thisset)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Loop Set Items",
        "link": "gloss_python_loop_set_items.asp",
        "description": "How to loop through the items in a set",
        "query": "Loop through the set, and print the values:",
        "eg": "\n  thisset = {\"apple\", \"banana\", \"cherry\"}for x in thisset:\u00a0 print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Check if Set Item Exists",
        "link": "gloss_python_check_if_set_item_exists.asp",
        "description": "How to check if a item exists",
        "query": "Check if \"apple\" is present in the set:",
        "eg": "\n  thisset = {\"apple\", \"banana\", \"cherry\"}\n  if \"apple\" in thisset:\u00a0 print(\"Yes, 'apple' is in this set\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Set Length",
        "link": "gloss_python_set_length.asp",
        "description": "How to determine the length of a set",
        "query": "Get the number of items in a set:",
        "eg": "\n  thisset = {\"apple\", \"banana\", \"cherry\"}\n  print(len(thisset))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Remove Set Items",
        "link": "gloss_python_remove_set_items.asp",
        "description": "How to remove set items",
        "query": "Remove \"banana\" by using the remove() method:",
        "eg": "\n  thisset = {\"apple\", \"banana\", \"cherry\"}\n  thisset.remove(\"banana\")\n  print(thisset)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Join Two Sets",
        "link": "gloss_python_join_sets.asp",
        "description": "How to join two sets",
        "query": "The union() method returns a new set with all items from both sets:",
        "eg": "\n  set1 = {\"a\", \"b\" , \"c\"}set2 = {1, 2, 3}\n  set3 = set1.union(set2)print(set3)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Dictionary",
        "link": "gloss_python_dictionary.asp",
        "description": "A dictionary is an unordered, and changeable, collection",
        "query": "Create and print a dictionary:",
        "eg": "\nthisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\nprint(thisdict)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Access Dictionary Items",
        "link": "gloss_python_access_dictionary_items.asp",
        "description": "How to access items in a dictionary",
        "query": "Get the value of the \"model\" key:",
        "eg": "\n  x = thisdict[\"model\"]\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Change Dictionary Item",
        "link": "gloss_python_change_dictionary_item.asp",
        "description": "How to change the value of a dictionary item",
        "query": "Change the \"year\" to 2018:",
        "eg": "\nthisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict[\"year\"] = 2018\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Loop Dictionary Items",
        "link": "gloss_python_loop_dictionary_items.asp",
        "description": "How to loop through the items in a tuple",
        "query": "Print all key names in the dictionary, one by one:",
        "eg": "\n  for x in thisdict:\u00a0 print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Check if Dictionary Item Exists",
        "link": "gloss_python_check_if_dictionary_item_exists.asp",
        "description": "How to check if a specified item is present in a dictionary",
        "query": "Check if \"model\" is present in the dictionary:",
        "eg": "\nthisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}\n  if \"model\" in thisdict:\u00a0 print(\"Yes, 'model' is \n  one of the keys in the thisdict dictionary\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Dictionary Length",
        "link": "gloss_python_dictionary_length.asp",
        "description": "How to determine the length of a dictionary",
        "query": "Print the number of items in the dictionary:",
        "eg": "\n  print(len(thisdict))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Add Dictionary Item",
        "link": "gloss_python_dictionary_add_item.asp",
        "description": "How to add an item to a dictionary",
        "query": null,
        "eg": "\nthisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict[\"color\"] = \"red\"print(thisdict)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Remove Dictionary Items",
        "link": "gloss_python_remove_dictionary_items.asp",
        "description": "How to remove dictionary items",
        "query": "The pop() method removes the item with the specified key name:",
        "eg": "\nthisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}thisdict.pop(\"model\")\n  print(thisdict)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Copy Dictionary",
        "link": "gloss_python_copy_dictionary.asp",
        "description": "How to copy a dictionary",
        "query": "Make a copy of a dictionary with the copy() method:",
        "eg": "\nthisdict =\t{\n\u00a0\u00a0\"brand\": \"Ford\",\n\u00a0\u00a0\"model\": \"Mustang\",\n\u00a0\u00a0\"year\": 1964\n}mydict \n  = thisdict.copy()\n  print(mydict)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Nested Dictionaries",
        "link": "gloss_python_nested_dictionaries.asp",
        "description": "A dictionary within a dictionary",
        "query": "Create a dictionary that contain three dictionaries:",
        "eg": "\n  myfamily = {\u00a0 \"child1\" : {\u00a0\u00a0\u00a0 \"name\" : \"Emil\",\n  \u00a0\u00a0\u00a0 \"year\" : 2004\u00a0 },\u00a0 \"child2\" : {\u00a0\u00a0\u00a0 \n  \"name\" : \"Tobias\",\u00a0\u00a0\u00a0 \"year\" : 2007\u00a0 },\u00a0 \n  \"child3\" : {\u00a0\u00a0\u00a0 \"name\" : \"Linus\",\n  \u00a0\u00a0\u00a0 \"year\" : 2011\u00a0 }} ",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "If Statement",
        "link": "gloss_python_if_statement.asp",
        "description": "How to write an if statement",
        "query": "If statement:",
        "eg": "\na = 33\nb = 200\nif b > a:\u00a0 print(\"b is greater than a\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "If Indentation",
        "link": "gloss_python_if_indentation.asp",
        "description": "If statements in Python relies on indentation (whitespace at the beginning of a line)",
        "query": "Notice the indentation inside the if block:",
        "eg": "\na = 33\nb = 200\nif b > a:\u00a0 print(\"b is greater than a\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Elif",
        "link": "gloss_python_elif.asp",
        "description": "elif is the same as \"else if\" in other programming languages",
        "query": null,
        "eg": "\na = 33\nb = 33\nif b > a:\n\t\u00a0\n\tprint(\"b is greater than a\")\nelif a == b:\n\t\u00a0\n\tprint(\"a and b are equal\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Else",
        "link": "gloss_python_else.asp",
        "description": "How to write an if...else statement",
        "query": null,
        "eg": "\na = 200\nb = 33\nif b > a:\n\t\u00a0\n\tprint(\"b is greater than a\")\nelif a == b:\n\t\u00a0\n\tprint(\"a and b are equal\")\n  else:\n\t\u00a0\n\tprint(\"a is greater than b\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Shorthand If",
        "link": "gloss_python_if_shorthand.asp",
        "description": "How to write an if statement in one line",
        "query": "One line if statement:",
        "eg": "\n  if a > b: print(\"a is greater than b\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Shorthand If Else",
        "link": "gloss_python_if_else_shorthand.asp",
        "description": "How to write an if...else statement in one line",
        "query": "One line if else statement:",
        "eg": "\n  a = 2b = 330print(\"A\") if a > b else print(\"B\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "If AND",
        "link": "gloss_python_if_and.asp",
        "description": "Use the and keyword to combine if statements",
        "query": "Test if a is greater than  b, AND if c  is greater than a:",
        "eg": "\n  a = 200b = 33c = 500if a > b and c > a:\n\t\u00a0\n\tprint(\"Both conditions are True\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "If OR",
        "link": "gloss_python_if_or.asp",
        "description": "Use the or keyword to combine if statements",
        "query": "Test if a is greater than  b, OR if a  is greater than c:",
        "eg": "\n  a = 200b = 33c = 500if a > b or a > c:\n\t\u00a0\n\tprint(\"At least one of the conditions is True\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "If NOT",
        "link": "gloss_python_if_not.asp",
        "description": "Use the not keyword to reverse the condition",
        "query": "Test if a is NOT greater than  b:",
        "eg": "\n  a = 33b = 200if not a > b:\n\t\u00a0\n\tprint(\"a is NOT greater than b\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Nested If",
        "link": "gloss_python_if_nested.asp",
        "description": "How to write an if statement inside an if statement",
        "query": null,
        "eg": "\n  x = 41if x > 10:\n\t\u00a0\n\tprint(\"Above ten,\")\u00a0 if x > 20:\u00a0\u00a0\u00a0 print(\"and \n  also above 20!\")\u00a0 else:\u00a0\u00a0\u00a0 print(\"but not \n  above 20.\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "The pass Keyword in If",
        "link": "gloss_python_if_pass.asp",
        "description": "Use the pass keyword inside empty if statements",
        "query": null,
        "eg": "\n  a = 33b = 200if b > a:\u00a0 pass",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "While",
        "link": "gloss_python_while.asp",
        "description": "How to write a while loop",
        "query": "Print i as long as i is less than 6:",
        "eg": "\ni = 1\nwhile i < 6:\n\u00a0\u00a0print(i)\n\u00a0\u00a0i += 1\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "While Break",
        "link": "gloss_python_while_break.asp",
        "description": "How to break a while loop",
        "query": "Exit the loop when i is 3:",
        "eg": "\ni = 1\nwhile i < 6:\n\u00a0\u00a0print(i)\n  \u00a0 if i == 3:\u00a0\u00a0\u00a0 break\u00a0\u00a0i += 1\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "While Continue",
        "link": "gloss_python_while_continue.asp",
        "description": "How to stop the current iteration and continue wit the next",
        "query": "Continue to the next iteration if i is 3:",
        "eg": "\ni = 0\nwhile i < 6:\n  \u00a0\u00a0i += 1\n\u00a0 if i == 3:\u00a0\u00a0\u00a0 continue\u00a0\u00a0print(i)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "While Else",
        "link": "gloss_python_while_else.asp",
        "description": "How to use an else statement in a while loop",
        "query": "Print a message once the condition is false:",
        "eg": "\ni = 1\nwhile i < 6:\n\u00a0\u00a0print(i)\n\u00a0\u00a0i += 1else:\u00a0 print(\"i is no longer less than 6\")\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "For",
        "link": "gloss_python_for.asp",
        "description": "How to write a for loop",
        "query": "Print each fruit in a fruit list:",
        "eg": "\n  fruits = [\"apple\", \"banana\", \"cherry\"]for \n  x in fruits:\n\t\u00a0\n\tprint(x)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Loop Through a String",
        "link": "gloss_python_for_string.asp",
        "description": "How to loop through a string",
        "query": "Loop through the letters in the word \"banana\":",
        "eg": "\n  for x in \"banana\":\u00a0 print(x)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "For Break",
        "link": "gloss_python_for_break.asp",
        "description": "How to break a for loop",
        "query": "Exit the loop when x is \"banana\":",
        "eg": "\n  fruits = [\"apple\", \"banana\", \"cherry\"]for x in fruits:\u00a0 print(x)\n  \u00a0 if x == \n  \"banana\":\u00a0\u00a0\u00a0 break\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "For Continue",
        "link": "gloss_python_for_continue.asp",
        "description": "How to stop the current iteration and continue wit the next",
        "query": "Do not print banana:",
        "eg": "\n  fruits = [\"apple\", \"banana\", \"cherry\"]for x in fruits:\u00a0 if x == \n  \"banana\":\u00a0\u00a0\u00a0 continue\u00a0 print(x)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Looping Through a range",
        "link": "gloss_python_for_range.asp",
        "description": "How to loop through a range of values",
        "query": "Using the range() function:",
        "eg": "\n  for x in range(6):\n\t\u00a0\n\tprint(x)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "For Else",
        "link": "gloss_python_for_else.asp",
        "description": "How to use an else statement in a for loop",
        "query": "Print all numbers from 0 to 5, and print a message when the loop has ended:",
        "eg": "\n  for x in range(6):\u00a0\n\tprint(x)else:\u00a0\n\tprint(\"Finally finished!\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Nested Loops",
        "link": "gloss_python_for_nested.asp",
        "description": "How to write a loop inside a loop",
        "query": "Print each adjective for every fruit:",
        "eg": "\n  adj = [\"red\", \"big\", \"tasty\"]fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in adj:\u00a0 for y in fruits:\u00a0\u00a0\u00a0 print(x, y)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "For pass",
        "link": "gloss_python_for_pass.asp",
        "description": "Use the pass keyword inside empty for loops",
        "query": null,
        "eg": "\n  for x in [0, 1, 2]:\u00a0 pass",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Function",
        "link": "gloss_python_function.asp",
        "description": "How to create a function in Python",
        "query": null,
        "eg": "\n  def my_function():\u00a0 print(\"Hello from a function\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Call a Function",
        "link": "gloss_python_function_call.asp",
        "description": "How to call a function in Python",
        "query": null,
        "eg": "\n  def my_function():\u00a0 print(\"Hello from a function\")\nmy_function()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Function Arguments",
        "link": "gloss_python_function_arguments.asp",
        "description": "How to use arguments in a function",
        "query": null,
        "eg": "\n  def my_function(fname):\u00a0 print(fname + \" Refsnes\")\n  my_function(\"Emil\")my_function(\"Tobias\")my_function(\"Linus\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "*args",
        "link": "gloss_python_function_arbitrary_arguments.asp",
        "description": "To deal with an unknown number of arguments in a function, use the * symbol before the parameter name",
        "query": "If the number of arguments is unknown, add a * before the parameter name:",
        "eg": "\n  def my_function(*kids):\u00a0 print(\"The youngest child \n  is \" + kids[2])\n  my_function(\"Emil\", \"Tobias\", \"Linus\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Keyword Arguments",
        "link": "gloss_python_function_keyword_arguments.asp",
        "description": "How to use keyword arguments in a function",
        "query": null,
        "eg": "\n  def my_function(child3, child2, child1):\u00a0 print(\"The youngest child \n  is \" + child3)\n  my_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "**kwargs",
        "link": "gloss_python_function_arbitrary_keyword_arguments.asp",
        "description": "To deal with an unknown number of keyword arguments in a function, use the * symbol before the parameter name",
        "query": "If the number of keyword arguments is unknown, add a double  ** before the parameter name:",
        "eg": "\n  def my_function(**kid):\u00a0 print(\"His last name is \" + kid[\"lname\"])\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Default Parameter Value",
        "link": "gloss_python_function_default_parameter.asp",
        "description": "How to use a default parameter value",
        "query": null,
        "eg": "\n  def my_function(country = \"Norway\"):\u00a0 print(\"I am from \" + \n  country)\n  my_function(\"Sweden\")my_function(\"India\")my_function()my_function(\"Brazil\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Passing a List as an Argument",
        "link": "gloss_python_function_passing_list.asp",
        "description": "How to pass a list as an argument",
        "query": null,
        "eg": "\n  def my_function(food):\u00a0 for x in food:\u00a0\u00a0\u00a0 \n  print(x)fruits = [\"apple\", \"banana\", \"cherry\"]\n  my_function(fruits)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Function Return Value",
        "link": "gloss_python_function_return_value.asp",
        "description": "How to return a value from a function",
        "query": null,
        "eg": "\n  def my_function(x):\u00a0 return 5 * xprint(my_function(3))print(my_function(5))\n  print(my_function(9))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "The pass Statement in Functions",
        "link": "gloss_python_function_pass.asp",
        "description": "Use the pass statement in empty functions",
        "query": null,
        "eg": "\n  def myfunction():\u00a0 pass",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Function Recursion",
        "link": "gloss_python_function_recursion.asp",
        "description": "Functions that can call itself is called recursive functions",
        "query": "Recursion Example",
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Lambda Function",
        "link": "gloss_python_lambda.asp",
        "description": "How to create anonymous functions in Python",
        "query": "A lambda function that adds 10 to the number passed in as an argument, and  print the result:",
        "eg": "\n  x = lambda a : a + 10print(x(5))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Why Use Lambda Functions",
        "link": "gloss_python_lambda_why.asp",
        "description": "Learn when to use a lambda function or not",
        "query": null,
        "eg": "\ndef myfunc(n):\n\u00a0\u00a0return lambda a : a * n\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Array",
        "link": "gloss_python_array.asp",
        "description": "Lists can be used as Arrays",
        "query": "Create an array containing car names:",
        "eg": "\n  cars = [\"Ford\", \"Volvo\", \"BMW\"]",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "What is an Array",
        "link": "gloss_python_arrray_what_is.asp",
        "description": "Arrays are variables that can hold more than one value",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Access Arrays",
        "link": "gloss_python_array_access.asp",
        "description": "How to access array items",
        "query": "Get the value of the first array item:",
        "eg": "\n  x = cars[0]",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Array Length",
        "link": "gloss_python_array_length.asp",
        "description": "How to get the length of an array",
        "query": "Return the number of elements in the cars array:",
        "eg": "\n  x = len(cars)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Looping Array Elements",
        "link": "gloss_python_array_loop.asp",
        "description": "How to loop through array elements",
        "query": "Print each item in the cars array:",
        "eg": "\n  for x in cars:\u00a0 print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Add Array Element",
        "link": "gloss_python_array_add.asp",
        "description": "How to add elements from an array",
        "query": "Add one more element to the cars array:",
        "eg": "\ncars.append(\"Honda\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Remove Array Element",
        "link": "gloss_python_array_remove.asp",
        "description": "How to remove elements from an array",
        "query": "Delete the second element of the cars array:",
        "eg": "\ncars.pop(1)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Array Methods",
        "link": "gloss_python_array_methods.asp",
        "description": "Python has a set of Array/Lists methods",
        "query": null,
        "eg": null,
        "Parameter": "append()",
        "eg_Description": "Adds an element at  the end of the list"
    },
    {
        "function": "Class",
        "link": "gloss_python_class.asp",
        "description": "A class is like an object constructor",
        "query": "Create a class named MyClass, with a property named x:",
        "eg": "\n  class MyClass:\u00a0 x = 5",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Create Class",
        "link": "gloss_python_class_create.asp",
        "description": "How to create a class",
        "query": "Create an object named p1, and print the value of x:",
        "eg": "\n  p1 = MyClass()print(p1.x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "The Class __init__() Function",
        "link": "gloss_python_class_init.asp",
        "description": "The __init__() function is executed when the class is initiated",
        "query": "Create a class named Person, use the __init__() function to assign values for name and age:",
        "eg": "\n  class Person:\u00a0 def __init__(self, name, age):\u00a0\u00a0\u00a0 \n  self.name = name\u00a0\u00a0\u00a0 self.age = agep1 = Person(\"John\", \n  36)\nprint(p1.name)print(p1.age)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Object Methods",
        "link": "gloss_python_object_methods.asp",
        "description": "Methods in objects are functions that belongs to the object",
        "query": "Insert a function that prints a greeting, and execute it on the p1 object:",
        "eg": "\n  class Person:\u00a0 def __init__(self, name, age):\u00a0\u00a0\u00a0 \n  self.name = name\u00a0\u00a0\u00a0 self.age = age\u00a0 def myfunc(self):\u00a0\u00a0\u00a0 \n  print(\"Hello my name is \" + self.name)p1 = Person(\"John\", \n  36)p1.myfunc()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "self",
        "link": "gloss_python_self.asp",
        "description": "The self parameter refers to the current instance of the class",
        "query": "Use the words mysillyobject and abc instead of self:",
        "eg": "\n  class Person:\u00a0 def __init__(mysillyobject, name, age):\u00a0\u00a0\u00a0 \n  mysillyobject.name = name\u00a0\u00a0\u00a0 mysillyobject.age = age\u00a0 def myfunc(abc):\u00a0\u00a0\u00a0 \n  print(\"Hello my name is \" + abc.name)p1 = Person(\"John\", \n  36)p1.myfunc()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Modify Object Properties",
        "link": "gloss_python_object_modify_properties.asp",
        "description": "How to modify properties of an object",
        "query": "Set the age of p1 to 40:",
        "eg": "\n  p1.age = 40",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Delete Object Properties",
        "link": "gloss_python_object_delete_properties.asp",
        "description": "How to modify properties of an object",
        "query": "Delete the age property from the p1 object:",
        "eg": "\n  del p1.age",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Delete Object",
        "link": "gloss_python_object_delete.asp",
        "description": "How to delete an object",
        "query": "Delete the p1 object:",
        "eg": "\n  del p1",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Class pass Statement",
        "link": "gloss_python_class_pass.asp",
        "description": "Use the pass statement in empty classes",
        "query": null,
        "eg": "\n  class Person:\u00a0 pass",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Create Parent Class",
        "link": "gloss_python_parent_class.asp",
        "description": "How to create a parent class",
        "query": "Create a class named Person, with firstname and lastname properties, and a printname method:",
        "eg": "\nclass Person:\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n  self.firstname = fname\u00a0\u00a0\u00a0 self.lastname = lname\u00a0 \n  def printname(self):\u00a0\u00a0\u00a0 print(self.firstname, \n  self.lastname)#Use the Person class to create an object, and then \n  execute the printname method:x = Person(\"John\", \"Doe\")\n  x.printname()",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Create Child Class",
        "link": "gloss_python_child_class.asp",
        "description": "How to create a child class",
        "query": "Create a class named Student, which will inherit the properties and methods from the Person class:",
        "eg": "\nclass Student(Person):\u00a0 pass",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Create the __init__() Function",
        "link": "gloss_python_create_init.asp",
        "description": "How to create the __init__() function",
        "query": "Add the __init__() function to the Student class:",
        "eg": "\n  class Student(Person):\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n  #add properties etc.",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "super Function",
        "link": "gloss_python_super.asp",
        "description": "The super() function make the child class inherit the parent class",
        "query": null,
        "eg": "\n  class Student(Person):\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n    super().__init__(fname, lname)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Add Class Properties",
        "link": "gloss_python_class_add_properties.asp",
        "description": "How to add a property to a class",
        "query": "Add a property called graduationyear to the Student class:",
        "eg": "\n  class Student(Person):\u00a0 def __init__(self, fname, lname):\u00a0\u00a0\u00a0 \n  super().__init__(fname, lname)\u00a0\u00a0\u00a0 self.graduationyear \n  = 2019",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Add Class Methods",
        "link": "gloss_python_class_add_methods.asp",
        "description": "How to add a method to a class",
        "query": "Add a method called welcome to the Student class:",
        "eg": "\n  class Student(Person):\u00a0 def __init__(self, fname, lname, year):\u00a0\u00a0\u00a0 \n  super().__init__(fname, lname)\u00a0\u00a0\u00a0 self.graduationyear \n  = year\u00a0 def welcome(self):\u00a0\u00a0\u00a0 print(\"Welcome\", \n  self.firstname, self.lastname, \"to the class of\", self.graduationyear)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Iterators",
        "link": "gloss_python_iterators.asp",
        "description": "An iterator is an object that contains a countable number of values",
        "query": "Iterate the values of a tuple:",
        "eg": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")\nfor x in mytuple:\n    \u00a0 print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Iterator vs Iterable",
        "link": "gloss_python_iterator_vs_iterable.asp",
        "description": "What is the difference between an iterator and an iterable",
        "query": "Return an iterator from a tuple, and print each value:",
        "eg": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")myit = iter(mytuple)\n    print(next(myit))print(next(myit))print(next(myit))\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Loop Through an Iterator",
        "link": "gloss_python_iterator_loop.asp",
        "description": "How to loop through the elements of an iterator",
        "query": "Iterate the values of a tuple:",
        "eg": "\n    mytuple = (\"apple\", \"banana\", \"cherry\")\nfor x in mytuple:\n    \u00a0 print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Create an Iterator",
        "link": "gloss_python_iterator_create.asp",
        "description": "How to create an iterator",
        "query": "Create an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc.):",
        "eg": "\n  class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n  1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  x = self.a\u00a0\u00a0\u00a0 self.a += 1\u00a0\u00a0\u00a0 return x\nmyclass = MyNumbers()myiter = iter(myclass)print(next(myiter))\n  print(next(myiter))print(next(myiter))print(next(myiter))\n  print(next(myiter))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "StopIteration",
        "link": "gloss_python_iterator_stop.asp",
        "description": "How to stop an iterator",
        "query": "Stop after 20 iterations:",
        "eg": "\n  class MyNumbers:\u00a0 def __iter__(self):\u00a0\u00a0\u00a0 self.a = \n  1\u00a0\u00a0\u00a0 return self\u00a0 def __next__(self):\u00a0\u00a0\u00a0 \n  if self.a <= 20:\u00a0\u00a0\u00a0\u00a0\u00a0 x = self.a\u00a0\u00a0\u00a0\u00a0\u00a0 \n  self.a += 1\u00a0\u00a0\u00a0\u00a0\u00a0 return x\u00a0\u00a0\u00a0 \n  else:\u00a0\u00a0\u00a0\u00a0\u00a0 raise StopIterationmyclass = \n  MyNumbers()myiter = iter(myclass)for x in myiter:\u00a0 \n  print(x)\n",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Global Scope",
        "link": "gloss_python_global_scope.asp",
        "description": "When does a variable belong to the global scope?",
        "query": "A variable created outside of a function is global and can be used by  anyone:",
        "eg": "\n    x = 300def myfunc():\u00a0 print(x)myfunc()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Global Keyword",
        "link": "gloss_python_global_keyword.asp",
        "description": "The global keyword makes the variable global",
        "query": "If you use the global keyword, the variable belongs to the global scope:",
        "eg": "\n    def myfunc():\u00a0 global x\u00a0 x = 300myfunc()\n    print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Create a Module",
        "link": "gloss_python_module_create.asp",
        "description": "How to create a module",
        "query": "Save this code in a file named mymodule.py",
        "eg": "\n  def greeting(name):\u00a0 print(\"Hello, \" + name)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Variables in Modules",
        "link": "gloss_python_module_variables.asp",
        "description": "How to use variables in a module",
        "query": "Save this code in the file mymodule.py",
        "eg": "\n  person1 = {\u00a0 \"name\": \"John\",\u00a0 \"age\": 36,\u00a0 \n  \"country\": \"Norway\"}",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Renaming a Module",
        "link": "gloss_python_module_rename.asp",
        "description": "How to rename a module",
        "query": "Create an alias for mymodule called mx:",
        "eg": "\n  import mymodule as mxa = mx.person1[\"age\"]print(a)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Built-in Modules",
        "link": "gloss_python_module_built-in.asp",
        "description": "How to import built-in modules",
        "query": "Import and use the platform module:",
        "eg": "\n  import platformx = platform.system()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Using the dir() Function",
        "link": "gloss_python_module_dir.asp",
        "description": "List all variable names and function names in a module",
        "query": "List all the defined names belonging to the platform module:",
        "eg": "\n  import platformx = dir(platform)print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Import From Module",
        "link": "gloss_python_module_import_from.asp",
        "description": "How to import only parts from a module",
        "query": "The module named mymodule has one function and one dictionary:",
        "eg": "\n  def greeting(name):\u00a0 print(\"Hello, \" + name)person1 \n  = {\u00a0 \"name\": \"John\",\u00a0 \"age\": 36,\u00a0 \"country\": \n  \"Norway\"}",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Datetime Module",
        "link": "gloss_python_date.asp",
        "description": "How to work with dates in Python",
        "query": "Import the datetime module and display the current date:",
        "eg": "\n  import datetimex = datetime.datetime.now()print(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Date Output",
        "link": "gloss_python_date_output.asp",
        "description": "How to output a date",
        "query": "Return the year and name of weekday:",
        "eg": "\n  import datetimex = datetime.datetime.now()print(x.year)\n  print(x.strftime(\"%A\"))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Create a Date Object",
        "link": "gloss_python_date_create.asp",
        "description": "How to create a date object",
        "query": "Create a date object:",
        "eg": "\n  import datetimex = datetime.datetime(2020, 5, 17)\nprint(x)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "The strftime Method",
        "link": "gloss_python_date_strftime.asp",
        "description": "How to format a date object into a readable string",
        "query": "Display the name of the month:",
        "eg": "\n  import datetimex = datetime.datetime(2018, 6, 1)print(x.strftime(\"%B\"))",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Date Format Codes",
        "link": "gloss_python_date_format_codes.asp",
        "description": "The datetime module has a set of legal format codes",
        "query": null,
        "eg": null,
        "Parameter": "%a",
        "eg_Description": "Weekday, short version"
    },
    {
        "function": "JSON",
        "link": "gloss_python_json.asp",
        "description": "How to work with JSON in Python",
        "query": "Import the json module:",
        "eg": "\n    import json\n  ",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Parse JSON",
        "link": "gloss_python_json_parse.asp",
        "description": "How to parse JSON code in Python",
        "query": "Convert from JSON to Python:",
        "eg": "\n  import json# some JSON:x =\u00a0 '{ \"name\":\"John\", \"age\":30, \"city\":\"New \n  York\"}'# parse x:y = json.loads(x)# the result is a \n  Python dictionary:print(y[\"age\"])",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Convert into JSON",
        "link": "gloss_python_convert_into_JSON.asp",
        "description": "How to convert a Python object in to JSON",
        "query": "Convert from Python to JSON:",
        "eg": "\n  import json# a Python object (dict):x = {\u00a0 \"name\": \n  \"John\",\u00a0 \"age\": 30,\u00a0 \"city\": \"New York\"}# \n  convert into JSON:y = json.dumps(x)# the result is a JSON string:\n  print(y)",
        "Parameter": "dict",
        "eg_Description": "Object"
    },
    {
        "function": "Format JSON",
        "link": "gloss_python_format_json.asp",
        "description": "How to format JSON output with indentations and line breaks",
        "query": "Use the indent parameter to define the numbers of indents:",
        "eg": "\n    json.dumps(x, indent=4)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Sort JSON",
        "link": "gloss_python_json_sort.asp",
        "description": "How to sort JSON",
        "query": "Use the sort_keys parameter to specify if the result should be sorted or not:",
        "eg": "\n    json.dumps(x, indent=4, sort_keys=True)",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "RegEx Module",
        "link": "gloss_python_regex.asp",
        "description": "How to import the regex module",
        "query": null,
        "eg": "import re",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "RegEx Functions",
        "link": "gloss_python_regex_functions.asp",
        "description": "The re module has a set of functions",
        "query": null,
        "eg": null,
        "Parameter": "findall",
        "eg_Description": "Returns a list containing all matches"
    },
    {
        "function": "Metacharacters in RegEx",
        "link": "gloss_python_regex_metacharacters.asp",
        "description": "Metacharacters are characters with a special meaning",
        "query": null,
        "eg": null,
        "Parameter": "[]",
        "eg_Description": "A set of characters"
    },
    {
        "function": "RegEx Special Sequences",
        "link": "gloss_python_regex_sequences.asp",
        "description": "A backslash followed by a a character has a special meaning",
        "query": null,
        "eg": null,
        "Parameter": "\\A",
        "eg_Description": "Returns a match if the specified characters are at the beginning of the string"
    },
    {
        "function": "RegEx Sets",
        "link": "gloss_python_regex_sets.asp",
        "description": "A set is a set of characters inside a pair of square brackets with a special meaning",
        "query": null,
        "eg": null,
        "Parameter": "[arn]",
        "eg_Description": "Returns a match where one of the specified characters (a, r, or n) are present"
    },
    {
        "function": "RegEx Match Object",
        "link": "gloss_python_regex_match.asp",
        "description": "The Match Object is an object containing information about the search and the result",
        "query": "Do a search that will return a Match Object:",
        "eg": "\n  import retxt = \"The rain in Spain\"x = re.search(\"ai\", \n  txt)\n  print(x) #this will print an object",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Install PIP",
        "link": "gloss_python_pip_install.asp",
        "description": "How to install PIP",
        "query": "Check PIP version:",
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "PIP Packages",
        "link": "gloss_python_pip_packages.asp",
        "description": "How to download and install a package with PIP",
        "query": "Download a package named \"camelcase\":",
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "PIP Remove Package",
        "link": "gloss_python_pip_packages_remove.asp",
        "description": "How to remove a package with PIP",
        "query": "Uninstall the package named \"camelcase\":",
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Error Handling",
        "link": "gloss_python_error_handling.asp",
        "description": "How to handle errors in Python",
        "query": "The try block will generate an exception,  because x is not defined:",
        "eg": "\n  try:\u00a0 print(x)except:\u00a0 print(\"An exception occurred\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Handle Many Exceptions",
        "link": "gloss_python_try_except.asp",
        "description": "How to handle more than one exception",
        "query": "Print one message if the try block raises a NameError and another  for other errors:",
        "eg": "\n  try:\u00a0 print(x)except NameError:\u00a0 print(\"Variable x \n  is not defined\")except:\u00a0 print(\"Something else went \n  wrong\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Try Else",
        "link": "gloss_python_try_else.asp",
        "description": "How to use the else keyword in a try statement",
        "query": "In this example, the try block does not  generate any error:",
        "eg": "\n  try:\u00a0 print(\"Hello\")except:\u00a0 print(\"Something went \n  wrong\")else:\u00a0 print(\"Nothing went wrong\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "Try Finally",
        "link": "gloss_python_try_finally.asp",
        "description": "How to use the finally keyword in a try statement",
        "query": null,
        "eg": "\n  try:\u00a0 print(x)except:\u00a0 print(\"Something went \n  wrong\")finally:\u00a0 print(\"The 'try except' is finished\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "raise",
        "link": "gloss_python_raise.asp",
        "description": "How to raise an exception in Python",
        "query": "Raise an error and stop the program if x is lower than 0:",
        "eg": "\n    x = -1if x < 0:\u00a0 raise Exception(\"Sorry, no numbers below \n    zero\")",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "seed()",
        "link": "ref_random_seed.asp",
        "description": "Initialize the random number generator",
        "query": "Set the seed value to 10 and see what happens:",
        "eg": "\n    import randomrandom.seed(10)\n    print(random.random())",
        "Parameter": "a",
        "eg_Description": "Optional. The seed value needed to generate a random number.If it is   an integer it is used directly, if not it has to be converted into an   integer.Default value is None, and if None, the generator uses the   current system time."
    },
    {
        "function": "getstate()",
        "link": "ref_random_getstate.asp",
        "description": "Returns the current internal state of the random number generator",
        "query": "Return the current state of the random generator:",
        "eg": "\n    import randomprint(random.getstate())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "setstate()",
        "link": "ref_random_setstate.asp",
        "description": "Restores the internal state of the random number generator",
        "query": "Capture and restore the state of the random number generator:",
        "eg": "\n    import random#print a random number:print(random.random())\n#capture the state:state = random.getstate()#print another \n    random number:print(random.random())#restore the state:\n    random.setstate(state)#and the next random number should be the same \n    as when you captured the state:print(random.random())",
        "Parameter": "state",
        "eg_Description": "Required. A state object. the setstate() method will restore the state   of\u00a0 the random number generator back to this sate."
    },
    {
        "function": "getrandbits()",
        "link": "ref_random_getrandbits.asp",
        "description": "Returns a number representing the random bits",
        "query": "Return an 8 bits sized integer:",
        "eg": "\n    import randomprint(random.getrandbits(8))",
        "Parameter": "n",
        "eg_Description": "Required. A number specifying the size, in bits, of the returned   integer."
    },
    {
        "function": "randrange()",
        "link": "ref_random_randrange.asp",
        "description": "Returns a random number between the given range",
        "query": "Return a number between 3 and 9:",
        "eg": "\n    import randomprint(random.randrange(3, 9))",
        "Parameter": "start",
        "eg_Description": "Optional. An integer specifying at which position to start.Default 0"
    },
    {
        "function": "randint()",
        "link": "ref_random_randint.asp",
        "description": "Returns a random number between the given range",
        "query": "Return a number between 3 and 9 (both included):",
        "eg": "\n    import randomprint(random.randint(3, 9))",
        "Parameter": "start",
        "eg_Description": "Required. An integer specifying at which position to start."
    },
    {
        "function": "choice()",
        "link": "ref_random_choice.asp",
        "description": "Returns a random element from the given sequence",
        "query": "Return a random element from a list:",
        "eg": "\n    import random\nmylist = [\"apple\", \"banana\", \"cherry\"]print(random.choice(mylist))",
        "Parameter": "sequence",
        "eg_Description": "Required. A sequence like a list, a tuple, a range of numbers etc."
    },
    {
        "function": "choices()",
        "link": "ref_random_choices.asp",
        "description": "Returns a list with a random selection from the given sequence",
        "query": "Return a list with 14 items.The list should contain a randomly  selection of the values from a specified list, and there should be 10 times  higher  possibility to select \"apple\" than the other two:",
        "eg": "\n    import random\nmylist = [\"apple\", \"banana\", \"cherry\"]print(random.choices(mylist, \n    weights = [10, 1, 1], k = 14))",
        "Parameter": "sequence",
        "eg_Description": "Required. A sequence like a list, a tuple, a range of numbers etc."
    },
    {
        "function": "shuffle()",
        "link": "ref_random_shuffle.asp",
        "description": "Takes a sequence and returns the sequence in a random order",
        "query": "Shuffle a list (reorganize the order of the list items):",
        "eg": "\n    import random\nmylist = [\"apple\", \"banana\", \"cherry\"]random.shuffle(mylist)print(mylist)",
        "Parameter": "sequence",
        "eg_Description": "Required. A sequence."
    },
    {
        "function": "sample()",
        "link": "ref_random_sample.asp",
        "description": "Returns a given sample of a sequence",
        "query": "Return a list that contains any 2 of the items from a list:",
        "eg": "\n    import random\nmylist = [\"apple\", \"banana\", \"cherry\"]\nprint(random.sample(mylist, k=2))",
        "Parameter": "sequence",
        "eg_Description": "Required. A sequence. Can be any sequence: list, set, range etc."
    },
    {
        "function": "random()",
        "link": "ref_random_random.asp",
        "description": "Returns a random float number between 0 and 1",
        "query": "Return random number between 0.0 and 1.0:",
        "eg": "\n    import random\nprint(random.random())",
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "uniform()",
        "link": "ref_random_uniform.asp",
        "description": "Returns a random float number between two given parameters",
        "query": "Return a random number between, and included, 20 and 60:",
        "eg": "\n    import random\nprint(random.uniform(20, 60))",
        "Parameter": "a",
        "eg_Description": "Required. A number specifying the lowest possible outcome"
    },
    {
        "function": "triangular()",
        "link": "ref_random_triangular.asp",
        "description": "Returns a random float number between two given parameters, you can also set a mode parameter to specify the midpoint between the two other parameters",
        "query": "Return a random number between, and included, 20 and 60, but most likely  closer to 20:",
        "eg": "\n    import random\nprint(random.triangular(20, 60, 30))",
        "Parameter": "low",
        "eg_Description": "Optional. A number specifying the lowest possible outcome.Default 0"
    },
    {
        "function": "betavariate()",
        "link": "No link",
        "description": "Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "expovariate()",
        "link": "No link",
        "description": "Returns a random float number based on the Exponential distribution (used in statistics)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "gammavariate()",
        "link": "No link",
        "description": "Returns a random float number based on the Gamma distribution (used in statistics)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "gauss()",
        "link": "No link",
        "description": "Returns a random float number based on the Gaussian distribution (used in probability theories)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "lognormvariate()",
        "link": "No link",
        "description": "Returns a random float number based on a log-normal distribution (used in probability theories)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "normalvariate()",
        "link": "No link",
        "description": "Returns a random float number based on the normal distribution (used in probability theories)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "vonmisesvariate()",
        "link": "No link",
        "description": "Returns a random float number based on the von Mises distribution (used in directional statistics)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "paretovariate()",
        "link": "No link",
        "description": "Returns a random float number based on the Pareto distribution (used in probability theories)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "weibullvariate()",
        "link": "No link",
        "description": "Returns a random float number based on the Weibull distribution (used in statistics)",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "delete(url,args)",
        "link": "ref_requests_delete.asp",
        "description": "Sends a DELETE request to the specified url",
        "query": "Make a DELETE request to a web page, and return the response text:",
        "eg": "\n    import requestsx = requests.delete('https://w3schools.com/python/demopage.php')print(x.text)",
        "Parameter": "url",
        "eg_Description": "Try it"
    },
    {
        "function": "get(url,params, args)",
        "link": "ref_requests_get.asp",
        "description": "Sends a GET request to the specified url",
        "query": "Make a request to a web page, and return the status code:",
        "eg": "\n    import requestsx = requests.get('https://w3schools.com')print(x.status_code)",
        "Parameter": "url",
        "eg_Description": "Try it"
    },
    {
        "function": "head(url,args)",
        "link": "ref_requests_head.asp",
        "description": "Sends a HEAD request to the specified url",
        "query": "Make a HEAD request to a web page, and return the HTTP headers:",
        "eg": "\n    import requestsx = requests.head('https://www.w3schools.com/python/demopage.php')print(x.headers)",
        "Parameter": "url",
        "eg_Description": "Try it"
    },
    {
        "function": "patch(url,data, args)",
        "link": "No link",
        "description": "Sends a PATCH request to the specified url",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "post(url,data, json, args)",
        "link": "ref_requests_post.asp",
        "description": "Sends a POST request to the specified url",
        "query": "Make a POST request to a web page, and return the response text:",
        "eg": "\n    import requestsurl = 'https://www.w3schools.com/python/demopage.php'\n    myobj = {'somekey': 'somevalue'}x = requests.post(url, json = myobj)\nprint(x.text)",
        "Parameter": "url",
        "eg_Description": "Try it"
    },
    {
        "function": "put(url,data, args)",
        "link": "No link",
        "description": "Sends a PUT request to the specified url",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "request(method,url,args)",
        "link": "No link",
        "description": "Sends a request of the specified method to the specified url",
        "query": null,
        "eg": null,
        "Parameter": null,
        "eg_Description": null
    },
    {
        "function": "statistics.harmonic_mean()",
        "link": "ref_stat_harmonic_mean.asp",
        "description": "Calculates the harmonic mean (central location) of the given data",
        "query": "Calculate the harmonic mean of the given data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate \n    harmonic mean\n    print(statistics.harmonic_mean([40, \n    60, 80]))\n    print(statistics.harmonic_mean([10, 30, 50, 70, 90]))\n",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator). Note: Cannot contain negative values!"
    },
    {
        "function": "statistics.mean()",
        "link": "ref_stat_mean.asp",
        "description": "Calculates the mean (average) of the given data",
        "query": "Calculate the average of the given data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate average values\n    print(statistics.mean([1, 3, 5, 7, 9, 11, 13]))\n    print(statistics.mean([1, 3, 5, 7, 9, 11]))\n    print(statistics.mean([-11, 5.5, -3.4, 7.1, -9, 22]))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.median()",
        "link": "ref_stat_median.asp",
        "description": "Calculates the median (middle value) of the given data",
        "query": "Calculate the median (middle value) of the given data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate middle values\n    print(statistics.median([1, 3, 5, 7, 9, 11, 13]))\n    print(statistics.median([1, 3, 5, 7, 9, 11]))\n    print(statistics.median([-11, 5.5, -3.4, 7.1, -9, 22]))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.median_grouped()",
        "link": "ref_stat_median_grouped.asp",
        "description": "Calculates the median of grouped continuous    data",
        "query": "Calculate the median of grouped continuous   data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate the median of grouped continuous dataprint(statistics.median_grouped([1, \n    2, 3, 4]))print(statistics.median_grouped([1, 2, 3, 4, 5]))print(statistics.median_grouped([1, \n    2, 3, 4], 2))print(statistics.median_grouped([1, 2, 3, 4], 3))print(statistics.median_grouped([1, \n    2, 3, 4], 5))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.median_high()",
        "link": "ref_stat_median_high.asp",
        "description": "Calculates the high median of the given data",
        "query": "Calculate the high median (middle value) of the given data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate the high middle values\n    print(statistics.median_high([1, 3, 5, 7, 9, 11, 13]))\n    print(statistics.median_high([1, 3, 5, 7, 9, 11]))\n    print(statistics.median_high([-11, 5.5, -3.4, 7.1, -9, 22]))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.median_low()",
        "link": "ref_stat_median_low.asp",
        "description": "Calculates the low median of the given data",
        "query": "Calculate the low median (middle value) of the given data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate the low middle values\n    print(statistics.median_low([1, 3, 5, 7, 9, 11, 13]))\n    print(statistics.median_low([1, 3, 5, 7, 9, 11]))\n    print(statistics.median_low([-11, 5.5, -3.4, 7.1, -9, 22]))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.mode()",
        "link": "ref_stat_mode.asp",
        "description": "Calculates the mode (central tendency) of the given numeric or nominal data",
        "query": "Calculate the mode (central tendency) of the given data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate \n    the mode\n    print(statistics.mode([1, 3, \n    3, 3, 5, 7, 7 9, 11]))\n    print(statistics.mode([1, 1, 3, -5, 7, -9, 11]))\n    print(statistics.mode(['red', \n    'green', 'blue', 'red']))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.pstdev()",
        "link": "ref_stat_pstdev.asp",
        "description": "Calculates the standard deviation from an entire population",
        "query": "Calculate the standard deviation from an entire population:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate \n    the standard deviation from an entire population\n    print(statistics.pstdev([1, 3, 5, 7, 9, 11]))print(statistics.pstdev([2, \n    2.5, 1.25, 3.1, 1.75, 2.8]))print(statistics.pstdev([-11, 5.5, -3.4, \n    7.1]))print(statistics.pstdev([1, 30, 50, 100]))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.stdev()",
        "link": "ref_stat_stdev.asp",
        "description": "Calculates the standard deviation from a sample of data",
        "query": "Calculate the standard deviation of the given data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate \n    the standard deviation from a sample of data\n    print(statistics.stdev([1, 3, 5, 7, 9, 11]))print(statistics.stdev([2, \n    2.5, 1.25, 3.1, 1.75, 2.8]))print(statistics.stdev([-11, 5.5, -3.4, 7.1]))\n    print(statistics.stdev([1, 30, 50, 100]))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.pvariance()",
        "link": "ref_stat_pvariance.asp",
        "description": "Calculates the variance of an entire population",
        "query": "Calculate the variance of an entire population:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate \n    the variance of an entire population\n    print(statistics.pvariance([1, 3, 5, 7, 9, 11]))print(statistics.pvariance([2, \n    2.5, 1.25, 3.1, 1.75, 2.8]))print(statistics.pvariance([-11, 5.5, -3.4, \n    7.1]))print(statistics.pvariance([1, 30, 50, 100]))",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "statistics.variance()",
        "link": "ref_stat_variance.asp",
        "description": "Calculates the variance from a sample of data",
        "query": "Calculate the variance from a sample of data:",
        "eg": "\n    # Import statistics Library\n    import statistics\n    # Calculate \n    the variance from a sample of data\n    print(statistics.variance([1, 3, 5, 7, 9, 11]))print(statistics.variance([2, \n    2.5, 1.25, 3.1, 1.75, 2.8]))print(statistics.variance([-11, 5.5, -3.4, \n    7.1]))print(statistics.variance([1, 30, 50, 100]))\n",
        "Parameter": "data",
        "eg_Description": "Required. The data values to be used (can be any sequence, list or   iterator)"
    },
    {
        "function": "math.acos()",
        "link": "ref_math_acos.asp",
        "description": "Returns the arc cosine of a number",
        "query": "Return the arc cosine of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the arc cosine \n    of numbersprint(math.acos(0.55))print(math.acos(-0.55))print(math.acos(0)) print(math.acos(1)) \n    print(math.acos(-1)) ",
        "Parameter": "x",
        "eg_Description": "Required. A number in the range -1 to 1. If x is not a number, it returns a TypeError"
    },
    {
        "function": "math.acosh()",
        "link": "ref_math_acosh.asp",
        "description": "Returns the inverse hyperbolic cosine of a number",
        "query": "Return the inverse hyperbolic cosine of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the inverse hyperbolic \n    cosine of different numbersprint (math.acosh(7))print (math.acosh(56))print (math.acosh(2.45)) \n    print (math.acosh(1))  ",
        "Parameter": "x",
        "eg_Description": "Required. A positive number >= 1. If x is not a number, it returns a TypeError"
    },
    {
        "function": "math.asin()",
        "link": "ref_math_asin.asp",
        "description": "Returns the arc sine of a number",
        "query": "Return the arc sine of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the arc sine \n    of numbersprint(math.asin(0.55))print(math.asin(-0.55))print(math.asin(0)) print(math.asin(1)) \n    print(math.asin(-1)) ",
        "Parameter": "x",
        "eg_Description": "Required. A number in the range -1 to 1. If x is not a number, it returns a TypeError"
    },
    {
        "function": "math.asinh()",
        "link": "ref_math_asinh.asp",
        "description": "Returns the inverse hyperbolic sine of a number",
        "query": "Return the inverse hyperbolic sine of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the inverse hyperbolic \n    sine of numbersprint(math.asinh(7))print(math.asinh(56))print(math.asinh(2.45)) print(math.asinh(1))",
        "Parameter": "x",
        "eg_Description": "Required. A positive or negative number. If x is not a number, it returns a TypeError"
    },
    {
        "function": "math.atan()",
        "link": "ref_math_atan.asp",
        "description": "Returns the arc tangent of a number in radians",
        "query": "Return the arc tangent of different numbers:",
        "eg": "\n    #Import math Libraryimport math #fReturn the arc tangent of \n    different numbers\n    print (math.atan(0.39))print (math.atan(67)) print (math.atan(-21))",
        "Parameter": "x",
        "eg_Description": "Required. A positive or negative number. If x is not a number,   it returns error a TypeError"
    },
    {
        "function": "math.atan2()",
        "link": "ref_math_atan2.asp",
        "description": "Returns the arc tangent of y/x in radians",
        "query": "Return the arc tangent of y/x in radians:",
        "eg": "\n    # Import math Libraryimport math # Return the arc tangent of y/x \n    in radiansprint(math.atan2(8, 5))print(math.atan2(20, 10))print(math.atan2(34, -7))",
        "Parameter": "y",
        "eg_Description": "Required. Specifies a positive or negative number"
    },
    {
        "function": "math.atanh()",
        "link": "ref_math_atanh.asp",
        "description": "Returns the inverse hyperbolic tangent of a number",
        "query": "Find the hyperbolic arctangent value of different numbers:",
        "eg": "\n    #Import math Libraryimport math #print the hyperbolic \n    arctangent of different numbers print(math.atanh(0.59))print(math.atanh(-0.12))",
        "Parameter": "x",
        "eg_Description": "Required. A positive or negative number between -0.99 and 0.99. If x is not a number, it returns a TypeError"
    },
    {
        "function": "math.ceil()",
        "link": "ref_math_ceil.asp",
        "description": "Rounds a number up to the nearest integer",
        "query": "Round a number upward to its nearest integer:",
        "eg": "\n    # Import math libraryimport math# Round a number upward to its \n    nearest integerprint(math.ceil(1.4))print(math.ceil(5.3))\n    print(math.ceil(-5.3))print(math.ceil(22.6))print(math.ceil(10.0))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the number to round up"
    },
    {
        "function": "math.comb()",
        "link": "ref_math_comb.asp",
        "description": "Returns the number of ways to choose k items from n items without repetition and order",
        "query": "Find the total number of possibilities to choose k things from  n items:",
        "eg": "\n    # Import math Libraryimport math # Initialize the number of \n    items to choose fromn = 7# Initialize the number of possibilities \n    to choosek = 5# Print total number of possible combinationsprint \n    (math.comb(n, k))",
        "Parameter": "n",
        "eg_Description": "Required. Positive integers of items to choose from"
    },
    {
        "function": "math.copysign()",
        "link": "ref_math_copysign.asp",
        "description": "Returns a float consisting of the value of the first parameter and the sign of the second parameter",
        "query": "Return the value of the first parameter and the sign of the second  parameter:",
        "eg": "\n    #Import math Libraryimport math #Return the value of the first \n    parameter and the sign of the second parameterprint(math.copysign(4, -1))\n    print(math.copysign(-8, 97.21))print(math.copysign(-43, -76))",
        "Parameter": "x",
        "eg_Description": "Required. A number. The return will have the value of this parameter"
    },
    {
        "function": "math.cos()",
        "link": "ref_math_cos.asp",
        "description": "Returns the cosine of a number",
        "query": "Find the cosine of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the cosine of \n    different numbersprint (math.cos(0.00))print (math.cos(-1.23))\n    print (math.cos(10))print (math.cos(3.14159265359))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the cosine of. If the value is not a number, it returns a TypeError"
    },
    {
        "function": "math.cosh()",
        "link": "ref_math_cosh.asp",
        "description": "Returns the hyperbolic cosine of a number",
        "query": "Find the hyperbolic cosine of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the hyperbolic cosine of \n    different numbersprint (math.cosh(1))print (math.cosh(8.90)) \n    print (math.cosh(0))print (math.cosh(1.52)) ",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the hyperbolic cosine of. If the value is not a number,   it returns a TypeError"
    },
    {
        "function": "math.degrees()",
        "link": "ref_math_degrees.asp",
        "description": "Converts an angle from radians to degrees",
        "query": "Convert angles from radians to degrees:",
        "eg": "\n    # Import math Libraryimport math # Convert from radians to \n    degrees:print (math.degrees(8.90))print (math.degrees(-20)) print \n    (math.degrees(1))print (math.degrees(90))",
        "Parameter": "x",
        "eg_Description": "Required. A radian value to convert into degrees. If the parameter is not a number, it returns a TypeError"
    },
    {
        "function": "math.dist()",
        "link": "ref_math_dist.asp",
        "description": "Returns the Euclidean distance between two points (p and q), where p and   q are the coordinates of that point",
        "query": "Find the Euclidean distance between one and two dimensional points:",
        "eg": "\n    # Import math Libraryimport math p = [3] q = [1] # \n    Calculate Euclidean distanceprint (math.dist(p, q))p = [3, 3]\n    q = [6, 12] # Calculate Euclidean distanceprint (math.dist(p, \n    q))",
        "Parameter": "p",
        "eg_Description": "Required. Specifies point 1"
    },
    {
        "function": "math.erf()",
        "link": "ref_math_erf.asp",
        "description": "Returns the error function of a number",
        "query": "Print error function for different numbers:",
        "eg": "\n    # Import math Libraryimport math # Print error function for \n    different \n    numbers print (math.erf(0.67))print (math.erf(1.34))print \n    (math.erf(-6))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the error function of"
    },
    {
        "function": "math.erfc()",
        "link": "ref_math_erfc.asp",
        "description": "Returns the complementary error function of a number",
        "query": "Print the complementary error function for different numbers:",
        "eg": "\n    # Import math Libraryimport math # Print complementary error function \n    for different numbers print (math.erfc(0.67))print (math.erfc(1.34))print \n    (math.erfc(-6))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the complementary error function of"
    },
    {
        "function": "math.exp()",
        "link": "ref_math_exp.asp",
        "description": "Returns E raised to the power of x",
        "query": "Return 'E' raised to the power of different numbers:",
        "eg": "\n    #Import math Libraryimport math #find the exponential of the \n    specified valueprint(math.exp(65))print(math.exp(-6.89))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the exponent"
    },
    {
        "function": "math.expm1()",
        "link": "ref_math_expm1.asp",
        "description": "Returns Ex- 1",
        "query": "Find the exponential value of a number - 1:",
        "eg": "\n    #Import math Libraryimport math #Return the exponential value of \n    a number - 1 \n    print(math.expm1(32))print(math.expm1(-10.89))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the exponent"
    },
    {
        "function": "math.fabs()",
        "link": "ref_math_fabs.asp",
        "description": "Returns the absolute value of a number",
        "query": "Return absolute value:",
        "eg": "\n    #Import math Libraryimport math #Print absolute values from \n    numbers \n    print(math.fabs(-66.43))print(math.fabs(-7))",
        "Parameter": "x",
        "eg_Description": "Required. A number. If we try anything else except a number, it returns a TypeError"
    },
    {
        "function": "math.factorial()",
        "link": "ref_math_factorial.asp",
        "description": "Returns the factorial of a number",
        "query": "Find the factorial of a number:",
        "eg": "\n    #Import math Libraryimport math #Return factorial of a number\n    print(math.factorial(9))print(math.factorial(6))\n    print(math.factorial(12))",
        "Parameter": "x",
        "eg_Description": "Required. A positive integer. If the number is negative, or not an integer, it returns a ValueError. If the value is not a number, it returns a TypeError"
    },
    {
        "function": "math.floor()",
        "link": "ref_math_floor.asp",
        "description": "Rounds a number down to the nearest integer",
        "query": "Round numbers down to the nearest integer:",
        "eg": "\n    # Import math libraryimport math# Round numbers down to the \n    nearest integerprint(math.floor(0.6))print(math.floor(1.4))print(math.floor(5.3))\n    print(math.floor(-5.3))print(math.floor(22.6))print(math.floor(10.0))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the number to round down"
    },
    {
        "function": "math.fmod()",
        "link": "ref_math_fmod.asp",
        "description": "Returns the remainder of x/y",
        "query": "Return the remainder of x/y:",
        "eg": "\n    # Import math Libraryimport math # Return the remainder of x/yprint(math.fmod(20, \n    4))print(math.fmod(20, 3))\n    print(math.fmod(15, 6))print(math.fmod(-10, 3))print(math.fmod(0, 0))",
        "Parameter": "x",
        "eg_Description": "Required. A positive or negative number to divide"
    },
    {
        "function": "math.frexp()",
        "link": "ref_math_frexp.asp",
        "description": "Returns the mantissa and the exponent, of a specified number",
        "query": "Find the mantissa and exponent of a number:",
        "eg": "\n    #Import math Libraryimport math #Return mantissa and exponent \n    of numbersprint(math.frexp(4))print(math.frexp(-4))print(math.frexp(7))",
        "Parameter": "x",
        "eg_Description": "Required. A positive or negative number. If the value is not a number, it returns TypeError"
    },
    {
        "function": "math.fsum()",
        "link": "ref_math_fsum.asp",
        "description": "Returns the sum of all items in any iterable (tuples, arrays, lists, etc.)",
        "query": "Return the sum of all items:",
        "eg": "\n    # Import math Libraryimport math# Print the sum of all items print(math.fsum([1, \n    2, 3, 4, 5]))print(math.fsum([100, 400, 340, 500]))print(math.fsum([1.7, \n    0.3, 1.5, 4.5]))",
        "Parameter": "iterable",
        "eg_Description": "Required. The list, tuple, array to sum. If the iterable is   not numbers, it returns a TypeError"
    },
    {
        "function": "math.gamma()",
        "link": "ref_math_gamma.asp",
        "description": "Returns the gamma function at x",
        "query": "Find the gamma function of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the gamma function for \n    different numbersprint(math.gamma(-0.1))print(math.gamma(8))\n    print(math.gamma(1.2))print(math.gamma(80))print(math.gamma(-0.55))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the gamma function for. If the number is a   negative integer, it returns a ValueError. If it is not a number, it returns a TypeError."
    },
    {
        "function": "math.gcd()",
        "link": "ref_math_gcd.asp",
        "description": "Returns the greatest common divisor of two integers",
        "query": "Find the greatest common divisor of the two integers:",
        "eg": "\n    #Import math Libraryimport math #find the\u00a0 the greatest \n    common divisor of the two integersprint (math.gcd(3, 6))print (math.gcd(6, \n    12))print (math.gcd(12, 36))print (math.gcd(-12, -36))print (math.gcd(5, \n    12))print (math.gcd(10, 0))print (math.gcd(0, 34))print (math.gcd(0, \n    0))",
        "Parameter": "int1",
        "eg_Description": "Required. The first integer to find the GCD for"
    },
    {
        "function": "math.hypot()",
        "link": "ref_math_hypot.asp",
        "description": "Returns the Euclidean norm",
        "query": "Find the hypotenuse of a right-angled triangle where perpendicular and base are known:",
        "eg": "\n    #Import math Libraryimport math #set perpendicular and base\n    perpendicular = 10base = 5#print the hypotenuse of a right-angled \n    triangleprint(math.hypot(parendicular, base))",
        "Parameter": "x1, x2, x3, ..., xn",
        "eg_Description": "Required. Two or more points representing coordinates"
    },
    {
        "function": "math.isclose()",
        "link": "ref_math_isclose.asp",
        "description": "Checks whether two values are close to each other, or not",
        "query": "Check whether two values are close to each other, or not:",
        "eg": "\n    #Import math Libraryimport math \n    #compare the closeness of two valuesprint(math.isclose(1.233, 1.4566))\n    print(math.isclose(1.233, 1.233))print(math.isclose(1.233, 1.24))print(math.isclose(1.233, 1.233000001))",
        "Parameter": "a",
        "eg_Description": "Required. The first value to check for closeness"
    },
    {
        "function": "math.isfinite()",
        "link": "ref_math_isfinite.asp",
        "description": "Checks whether a number is finite or not",
        "query": "Check whether a value is finite or not:",
        "eg": "\n    # Import math Libraryimport math # Check whether the values are \n    finite or notprint(math.isfinite(2000))print(math.isfinite(-45.34))print(math.isfinite(+45.34))print(math.isfinite(math.inf))print(math.isfinite(float(\"nan\")))print(math.isfinite(float(\"inf\")))print(math.isfinite(float(\"-inf\")))print(math.isfinite(-math.inf))print(math.isfinite(0.0))",
        "Parameter": "x",
        "eg_Description": "Required. The value to check. Must be a number   (float/integer/infinite/NaN/finite)"
    },
    {
        "function": "math.isinf()",
        "link": "ref_math_isinf.asp",
        "description": "Checks whether a number is infinite or not",
        "query": "Check whether a value is infinity or not:",
        "eg": "\n    # Import math Libraryimport math # Check whether the values are \n    infinite or notprint(math.isinf(56))print(math.isinf(-45.34))print(math.isinf(+45.34))print(math.isinf(math.inf))print(math.isinf(float(\"nan\")))print(math.isinf(float(\"inf\")))print(math.isinf(float(\"-inf\")))print(math.isinf(-math.inf))",
        "Parameter": "x",
        "eg_Description": "Required. The number to check"
    },
    {
        "function": "math.isnan()",
        "link": "ref_math_isnan.asp",
        "description": "Checks whether a value is NaN (not a number) or not",
        "query": "Check whether a value is NaN or not:",
        "eg": "\n    # Import math Libraryimport math # Check whether some values are NaN \n    or notprint (math.isnan (56))print \n    (math.isnan (-45.34))print (math.isnan (+45.34))print (math.isnan \n    (math.inf))print (math.isnan (float(\"nan\")))print (math.isnan \n    (float(\"inf\")))print (math.isnan (float(\"-inf\")))print (math.isnan \n    (math.nan))",
        "Parameter": "x",
        "eg_Description": "Required. The value to check"
    },
    {
        "function": "math.isqrt()",
        "link": "ref_math_isqrt.asp",
        "description": "Rounds a square root number downwards to the nearest integer",
        "query": "Round a square root number downwards to the nearest integer:",
        "eg": "\n    # Import math Libraryimport math# Print the square \n    root of different numbersprint (math.sqrt(10))print (math.sqrt (12))\n    print (math.sqrt (68))print (math.sqrt (100))# Round square root \n    downward to the nearest integerprint (math.isqrt(10))print \n    (math.isqrt (12))print (math.isqrt (68))print (math.isqrt (100))",
        "Parameter": "x",
        "eg_Description": "Required. The number to round the square root of. If x is   negative, it returns a ValueError. If x is not a number, it returns a TypeError"
    },
    {
        "function": "math.ldexp()",
        "link": "ref_math_ldexp.asp",
        "description": "Returns the inverse ofmath.frexp()which is x * (2**i) of the given numbers x and i",
        "query": "Return value of x * (2**i):",
        "eg": "\n    #Import math Libraryimport math #Return value of x * (2**i)print(math.ldexp(9, 3))print(math.ldexp(-5, 2))print(math.ldexp(15, \n    2))",
        "Parameter": "x",
        "eg_Description": "Required. A positive or negative number. If the value is not a number, it returns TypeError"
    },
    {
        "function": "math.lgamma()",
        "link": "ref_math_lgamma.asp",
        "description": "Returns the log gamma value of x",
        "query": "Find the log gamma value of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the log gamma value of \n    different numbersprint (math.lgamma(7))print (math.lgamma(-4.2))",
        "Parameter": "x",
        "eg_Description": "Required. The number to find the log gamma value of. If the number is a   negative integer, it returns a ValueError. If it is not a number, it returns a TypeError."
    },
    {
        "function": "math.log()",
        "link": "ref_math_log.asp",
        "description": "Returns the natural logarithm of a number, or the logarithm of number to base",
        "query": "Find the natural logarithm of different numbers",
        "eg": "\n    # Import math Libraryimport math # Return the natural logarithm \n    of different numbersprint(math.log(2.7183))print(math.log(2))\n    print(math.log(1))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the value to calculate the logarithm for. If the   value is 0 or a negative number, it returns a ValueError. If the value is   not a number, it returns a TypeError"
    },
    {
        "function": "math.log10()",
        "link": "ref_math_log10.asp",
        "description": "Returns the base-10 logarithm of x",
        "query": "Find the base-10 logarithm of different numbers",
        "eg": "\n    # Import math Libraryimport math # Return the base-10 logarithm \n    of different numbersprint(math.log10(2.7183))print(math.log10(2))\n    print(math.log10(1))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the value to calculate the logarithm for. If the   value is 0 or a negative number, it returns a ValueError. If the value is   not a number, it returns a TypeError"
    },
    {
        "function": "math.log1p()",
        "link": "ref_math_log1p.asp",
        "description": "Returns the natural logarithm of 1+x",
        "query": "Find the log(1+number) for different numbers",
        "eg": "\n    # Import math Libraryimport math # Return the log(1+number) for different numbersprint(math.log1p(2.7183))print(math.log1p(2))\n    print(math.log1p(1))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the number to process. If the   value is a negative number, it returns a ValueError. If the value is   not a number, it returns a TypeError"
    },
    {
        "function": "math.log2()",
        "link": "ref_math_log2.asp",
        "description": "Returns the base-2 logarithm of x",
        "query": "Find the base-2 logarithm of different numbers",
        "eg": "\n    # Import math Libraryimport math # Return the base-2 logarithm \n    of different numbersprint(math.log2(2.7183))print(math.log2(2))\n    print(math.log2(1))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the value to calculate the logarithm for. If the   value is 0, or a negative number, it returns a ValueError. If the value is   not a number, it returns a TypeError"
    },
    {
        "function": "math.perm()",
        "link": "ref_math_perm.asp",
        "description": "Returns the number of ways to choose k items from n items with order and without repetition",
        "query": "Find the number of ways to choose k things from  n items:",
        "eg": "\n    # Import math Libraryimport math # Initialize the number of \n    items to choose fromn = 7# Initialize the number of items \n    to choosek = 5# Print the number of ways to choose k items from \n    n itemsprint \n    (math.perm(n, k))",
        "Parameter": "n",
        "eg_Description": "Required. Positive integers of items to choose from"
    },
    {
        "function": "math.pow()",
        "link": "ref_math_pow.asp",
        "description": "Returns the value of x to the power of y",
        "query": "Find the value of 9 raised to the power of 3:",
        "eg": "\n    # Import math Libraryimport math #Return the value of 9 raised \n    to the power of 3print(math.pow(9, 3))",
        "Parameter": "x",
        "eg_Description": "Required. A number which represents the base"
    },
    {
        "function": "math.prod()",
        "link": "ref_math_prod.asp",
        "description": "Returns the product of all the elements in an iterable",
        "query": "Return the product of the elements from the given iterable:",
        "eg": "\n    # Import math Libraryimport mathsequence = (2, 2, 2)\n    #Return the product of the elementsprint(math.prod(sequence))",
        "Parameter": "iterable",
        "eg_Description": "Required. Specifies the elements of the iterable whose product is   computed by the function"
    },
    {
        "function": "math.radians()",
        "link": "ref_math_radians.asp",
        "description": "Converts a degree value into radians",
        "query": "Convert different degrees into radians:",
        "eg": "\n    # Import math Libraryimport math # Convert different degrees \n    into radiansprint(math.radians(180))print(math.radians(100.03))\n    print(math.radians(-20))",
        "Parameter": "x",
        "eg_Description": "Required. The degree value to be converted into radians. If the parameter is   not a number, it returns a TypeError"
    },
    {
        "function": "math.remainder()",
        "link": "ref_math_remainder.asp",
        "description": "Returns the closest value that can make numerator completely divisible by the denominator",
        "query": "Return the remainder of x with respect to y:",
        "eg": "\n    # Import math Libraryimport math # Return the remainder of x/yprint (math.remainder(9, 2))print (math.remainder(9, \n    3))print \n    (math.remainder(18, 4))",
        "Parameter": "x",
        "eg_Description": "Required. The number you want to divide."
    },
    {
        "function": "math.sin()",
        "link": "ref_math_sin.asp",
        "description": "Returns the sine of a number",
        "query": "Find the sine of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the sine of different \n    valuesprint (math.sin(0.00))print (math.sin(-1.23))\n    print (math.sin(10))print (math.sin(math.pi))print \n    (math.sin(math.pi/2))",
        "Parameter": "x",
        "eg_Description": "Required. The number to find the sine of. If the value is not a number, it returns a TypeError"
    },
    {
        "function": "math.sinh()",
        "link": "ref_math_sinh.asp",
        "description": "Returns the hyperbolic sine of a number",
        "query": "Find the hyperbolic sine of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the hyperbolic sine of different \n    valuesprint(math.sinh(0.00))print(math.sinh(-23.45))\n    print(math.sinh(23))print(math.sinh(1.00))print(math.sinh(math.pi))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the hyperbolic sine of. If the value is not a number, it returns a TypeError"
    },
    {
        "function": "math.sqrt()",
        "link": "ref_math_sqrt.asp",
        "description": "Returns the square root of a number",
        "query": "Find the square root of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the square root of \n    different numbersprint (math.sqrt(9))print (math.sqrt(25))print \n    (math.sqrt(16))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the square root of. If the number is less   than 0, it returns a ValueError. If the value is not a number,   it returns a TypeError"
    },
    {
        "function": "math.tan()",
        "link": "ref_math_tan.asp",
        "description": "Returns the tangent of a number",
        "query": "Find the tangent of different numbers (radians):",
        "eg": "\n    # Import math Libraryimport math # Return the tangent of \n    different numbersprint (math.tan(90))print (math.tan(-90))print \n    (math.tan(45))print \n    (math.tan(60))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the tangent of. If the value is not a number, it returns a TypeError"
    },
    {
        "function": "math.tanh()",
        "link": "ref_math_tanh.asp",
        "description": "Returns the hyperbolic tangent of a number",
        "query": "Find the hyperbolic tangent of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the hyperbolic tangent of \n    different numbersprint(math.tanh(8))print(math.tanh(1))\n    print(math.tanh(-6.2))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the hyperbolic tangent of. If the value is not a number,   it returns a TypeError"
    },
    {
        "function": "math.trunc()",
        "link": "ref_math_trunc.asp",
        "description": "Returns the truncated integer parts of a number",
        "query": "Find the integer part of different numbers:",
        "eg": "\n    # Import math Libraryimport math # Return the truncated integer \n    parts of \n    different numbersprint(math.trunc(2.77))print(math.trunc(8.32))print(math.trunc(-99.29))",
        "Parameter": "x",
        "eg_Description": "Required. The number you want to remove the decimal part of. If the value is not a number,   it returns a TypeError"
    },
    {
        "function": "cmath.acos(x)",
        "link": "ref_cmath_acos.asp",
        "description": "Returns the arc cosine value of x",
        "query": "Find the arc cosine of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the arc cosine of a complex numberprint (cmath.acos(2+3j)) ",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the arc cosine of"
    },
    {
        "function": "cmath.acosh(x)",
        "link": "ref_cmath_acosh.asp",
        "description": "Returns the hyperbolic arc cosine of x",
        "query": "Find the inverse hyperbolic arc cosine value of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the hyperbolic arc cosine of a complex numberprint (cmath.acos(2 + 3j))  ",
        "Parameter": "x",
        "eg_Description": "Required. The number to find the inverse hyperbolic cosine of"
    },
    {
        "function": "cmath.asin(x)",
        "link": "ref_cmath_asin.asp",
        "description": "Returns the arc sine of x",
        "query": "Find the arc sine of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the arc sine of a complex numberprint (cmath.asin(2 + 3j)) ",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the arc sine of"
    },
    {
        "function": "cmath.asinh(x)",
        "link": "ref_cmath_asinh.asp",
        "description": "Returns the hyperbolic arc sine of x",
        "query": "Find the hyperbolic arc sine of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the hyperbolic arc sine of a complex numberprint (cmath.asinh(2+3j))",
        "Parameter": "x",
        "eg_Description": "Required. The number to find the inverse hyperbolic sine of"
    },
    {
        "function": "cmath.atan(x)",
        "link": "ref_cmath_atan.asp",
        "description": "Returns the arc tangent value of x",
        "query": "Find the arctangent of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the arc tangent of a complex numberprint (cmath.atan(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the arctangent of"
    },
    {
        "function": "cmath.atanh(x)",
        "link": "ref_cmath_atanh.asp",
        "description": "Returns the hyperbolic arctangent value of x",
        "query": "Find the hyperbolic arctangent of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the hyperbolic arctangent of a complex numberprint (cmath.atanh(2+ 3j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the inverse hyperbolic arctangent of"
    },
    {
        "function": "cmath.cos(x)",
        "link": "ref_cmath_cos.asp",
        "description": "Returns the cosine of x",
        "query": "Find the cosine of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the cosine of a complex numberprint (cmath.cos(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the cosine of"
    },
    {
        "function": "cmath.cosh(x)",
        "link": "ref_cmath_cosh.asp",
        "description": "Returns the hyperbolic cosine of x",
        "query": "Find the hyperbolic cosine of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the hyperbolic cosine of a complex numberprint (cmath.cosh(2 + 3j)) ",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the hyperbolic cosine of"
    },
    {
        "function": "cmath.exp(x)",
        "link": "ref_cmath_exp.asp",
        "description": "Returns the value of Ex, where E is Euler's number (approximately 2.718281...), and x is the number passed to it",
        "query": "Find the exponential of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the exponential of a complex numberprint (cmath.exp(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find exponential value of."
    },
    {
        "function": "cmath.isclose()",
        "link": "ref_cmath_isclose.asp",
        "description": "Checks whether two values are close, or not",
        "query": "Compare the closeness of two complex values:",
        "eg": "\n    #Import cmath Libraryimport cmath #compare the closeness of two \n    complex values using relative toleranceprint(cmath.isclose(10+5j, \n    10+5j)) print(cmath.isclose(10+5j, 10.01+5j))",
        "Parameter": "a",
        "eg_Description": "Required. The first value to check for closeness"
    },
    {
        "function": "cmath.isfinite(x)",
        "link": "ref_cmath_isfinite.asp",
        "description": "Checks whether x is a finite number",
        "query": "Check whether a complex value is finite or not:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    whether a complex number is finite or notprint (cmath.isfinite(2 + 3j))\n    print (cmath.isfinite(complex(5.0,float('inf'))))print \n    (cmath.isfinite(float('inf')+ 5j))",
        "Parameter": "x",
        "eg_Description": "Required. The value to check if it is finite or not"
    },
    {
        "function": "cmath.isinf(x)",
        "link": "ref_cmath_isinf.asp",
        "description": "Check whether x is a positive or negative infinty",
        "query": "Check whether a complex value is infinite or not:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    whether a complex number is infinite or notprint (cmath.isinf(complex(10 \n    + float('inf'))))print (cmath.isinf(11 + 4j))",
        "Parameter": "x",
        "eg_Description": "Required. The value to check for infinity"
    },
    {
        "function": "cmath.isnan(x)",
        "link": "ref_cmath_isnan.asp",
        "description": "Checks whether x is NaN (not a number)",
        "query": "Check whether a complex value is NaN or not:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    whether a complex number is NaN or notprint (cmath.isnan(12 + \n    float('nan')))print (cmath.isnan(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. The value to check for NaN"
    },
    {
        "function": "cmath.log(x[, base])",
        "link": "ref_cmath_log.asp",
        "description": "Returns the logarithm of x to the base",
        "query": "Find the logarithm of a complex value:",
        "eg": "\n    #Import cmath Libraryimport cmath #print log value of some given \n    parametersprint (cmath.log(1+ 1j))print (cmath.log(1, 2.5))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the value to calculate the logarithm for. If the   value is 0 or a negative number, it returns a ValueError. If the value is   not a number, it returns a TypeError"
    },
    {
        "function": "cmath.log10(x)",
        "link": "ref_cmath_log10.asp",
        "description": "Returns the base-10 logarithm of x",
        "query": "Find the base-10 logarithm of a complex number:",
        "eg": "\n    #Import cmath Libraryimport cmath #print base-10 log value of \n    complex numbersprint (cmath.log10(2+ 3j))print (cmath.log10(1+ 2j))",
        "Parameter": "x",
        "eg_Description": "Required. Specifies the value to calculate the base-10 logarithm for. If the   value is 0 or a negative number, it returns a ValueError. If the value is   not a number, it returns a TypeError"
    },
    {
        "function": "cmath.phase()",
        "link": "ref_cmath_phase.asp",
        "description": "Return the phase of a complex number",
        "query": "Find the phase of a complex number:",
        "eg": "\n    #Import cmath Libraryimport cmath #print phase of some given \n    parametersprint (cmath.phase(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. The number to find the phase of"
    },
    {
        "function": "cmath.polar()",
        "link": "ref_cmath_polar.asp",
        "description": "Convert a complex number to polar coordinates",
        "query": "Convert a complex number to polar coordinates form:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the polar coordinates of complex numberprint (cmath.polar(2 + 3j))\n    print (cmath.polar(1 + 5j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find polar coordinates of"
    },
    {
        "function": "cmath.rect()",
        "link": "ref_cmath_rect.asp",
        "description": "Convert polar coordinates to rectangular form",
        "query": "Convert polar coordinates to rectangular form:",
        "eg": "\n    #import cmath for complex number operations import cmath#convert \n    a polar coordinate to rectangular form\n    print(cmath.rect(3.1622776601683795, 1.2490457723982544))",
        "Parameter": "r",
        "eg_Description": "Required. Represents the modulus of a complex number"
    },
    {
        "function": "cmath.sin(x)",
        "link": "ref_cmath_sin.asp",
        "description": "Returns the sine of x",
        "query": "Find the sine of a complex number:",
        "eg": "\n    #import cmath for complex number operations import cmath#find \n    the sine of complex numberprint (cmath.sin(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the sine of"
    },
    {
        "function": "cmath.sinh(x)",
        "link": "ref_cmath_sinh.asp",
        "description": "Returns the hyperbolic sine of x",
        "query": "Find the hyperbolic sine of a complex number:",
        "eg": "\n    #importing cmath for complex number operations import cmath#find \n    the hyperbolic sine of a complex numberprint (cmath.sinh(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the hyperbolic sine of"
    },
    {
        "function": "cmath.sqrt(x)",
        "link": "ref_cmath_sqrt.asp",
        "description": "Returns the square root of x",
        "query": "Find the square root of a complex number:",
        "eg": "\n    #Import cmath Libraryimport cmath #Return the square root of a \n    complex numberprint (cmath.sqrt(2 + 3j))print (cmath.sqrt(15))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the square root of. If the number is less   than 0, it returns a ValueError. If the value is not a number,   it returns a TypeError"
    },
    {
        "function": "cmath.tan(x)",
        "link": "ref_cmath_tan.asp",
        "description": "Returns the tangent of x",
        "query": "Find the tangent of a complex number:",
        "eg": "\n    #Import cmath Libraryimport cmath #Return the tangent of a \n    complex numberprint (cmath.tan(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the tangent of. If the value is not a number,   it returns a TypeError"
    },
    {
        "function": "cmath.tanh(x)",
        "link": "ref_cmath_tanh.asp",
        "description": "Returns the hyperbolic tangent of x",
        "query": "Find the hyperbolic tangent of a complex number:",
        "eg": "\n    #Import cmath Libraryimport cmath #Return the hyperbolic tangent \n    of a complex numberprint (cmath.tanh(2 + 3j))",
        "Parameter": "x",
        "eg_Description": "Required. A number to find the hyperbolic tangent of. If the value is not a number,   it returns a TypeError"
    }
]